"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger.js"));
var _lodash = _interopRequireDefault(require("lodash"));
const miscCommands = {};
miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);
  const output = await this.exec(['describe'], ['--json']);
  return JSON.parse(output);
};
miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);
  await this.exec(['focus']);
};
miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);
  await this.exec(['open'], [url]);
};
miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keychain on the device '${this.udid}'`);
  await this.exec(['clear-keychain']);
};
miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);
  await this.exec(['set-location'], [latitude, longitude]);
};
miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);
  const command = ['approve'];
  const args = [];
  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }
  args.push(bundleId);
  await this.exec(command, args);
};
miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);
  await this.exec(['contacts', 'update'], [dbPath]);
};
var _default = miscCommands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9nZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9kYXNoIiwibWlzY0NvbW1hbmRzIiwiZGVzY3JpYmVEZXZpY2UiLCJsb2ciLCJkZWJ1ZyIsInVkaWQiLCJvdXRwdXQiLCJleGVjIiwiSlNPTiIsInBhcnNlIiwiZm9jdXNTaW11bGF0b3IiLCJvcGVuVXJsIiwidXJsIiwiY2xlYXJLZXljaGFpbiIsInNldExvY2F0aW9uIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJhcHByb3ZlIiwiYnVuZGxlSWQiLCJwZXJtaXNzaW9ucyIsInN0cmluZ2lmeSIsImNvbW1hbmQiLCJhcmdzIiwiXyIsImlzQXJyYXkiLCJwdXNoIiwiYWRkQ29udGFjdHMiLCJkYlBhdGgiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3Rvb2xzL21pc2MtY29tbWFuZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jb25zdCBtaXNjQ29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBSZXR1cm5zIG1ldGFkYXRhIGFib3V0IHRoZSBzcGVjaWZpZWQgdGFyZ2V0LlxuICogT3V0cHV0IGV4YW1wbGU6XG4gKiB7XG4gKiAgIHVkaWQ6ICdBOTM5MUI3QS0zRUFGLTQ0NEUtQjlBNS0yNTA0QTJDNDhFNkYnLFxuICogICBuYW1lOiAnYXBwaXVtLWlkYi10ZXN0cy02MzBBQUIzRC0yN0NELTQzRDItQkQ5Ni03NzIwQzQyQjFENTQnLFxuICogICB0YXJnZXRfdHlwZTogJ3NpbXVsYXRvcicsXG4gKiAgIHN0YXRlOiAnQm9vdGVkJyxcbiAqICAgb3NfdmVyc2lvbjogJ2lPUyAxMy43JyxcbiAqICAgYXJjaGl0ZWN0dXJlOiAneDg2XzY0JyxcbiAqICAgY29tcGFuaW9uX2luZm86IHtcbiAqICAgICB1ZGlkOiAnQTkzOTFCN0EtM0VBRi00NDRFLUI5QTUtMjUwNEEyQzQ4RTZGJyxcbiAqICAgICBpc19sb2NhbDogdHJ1ZSxcbiAqICAgICBwaWQ6IG51bGwsXG4gKiAgICAgYWRkcmVzczoge1xuICogICAgICAgcGF0aDogJy90bXAvaWRiL0E5MzkxQjdBLTNFQUYtNDQ0RS1COUE1LTI1MDRBMkM0OEU2Rl9jb21wYW5pb24uc29jaydcbiAqICAgICB9LFxuICogICAgIG1ldGFkYXRhOiB7fVxuICogICB9LFxuICogICBzY3JlZW5fZGltZW5zaW9uczoge1xuICogICAgIHdpZHRoOiA3NTAsXG4gKiAgICAgaGVpZ2h0OiAxMzM0LFxuICogICAgIGRlbnNpdHk6IDIsXG4gKiAgICAgd2lkdGhfcG9pbnRzOiAzNzUsXG4gKiAgICAgaGVpZ2h0X3BvaW50czogNjY3XG4gKiAgIH0sXG4gKiAgIG1vZGVsOiBudWxsLFxuICogICBkZXZpY2U6IG51bGwsXG4gKiAgIGV4dGVuZGVkOiB7fSxcbiAqICAgZGlhZ25vc3RpY3M6IHt9LFxuICogICBtZXRhZGF0YToge31cbiAqIH1cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgY29tbWFuZCBvdXRwdXQgcGFyc2VkIHRvIGFuIG9iamVjdFxuICovXG5taXNjQ29tbWFuZHMuZGVzY3JpYmVEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiBkZXNjcmliZURldmljZSAoKSB7XG4gIGxvZy5kZWJ1ZyhgRGVzY3JpYmluZyB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ2Rlc2NyaWJlJ10sIFsnLS1qc29uJ10pO1xuICByZXR1cm4gSlNPTi5wYXJzZShvdXRwdXQpO1xufTtcblxuLyoqXG4gKiBCcmluZ3MgYSBzaW11bGF0b3JzIHdpbmRvdyB0byB0aGUgZm9yZWdyb3VuZC5cbiAqL1xubWlzY0NvbW1hbmRzLmZvY3VzU2ltdWxhdG9yID0gYXN5bmMgZnVuY3Rpb24gZm9jdXNTaW11bGF0b3IgKCkge1xuICBsb2cuZGVidWcoYEZvY3VzaW5nIFNpbXVsYXRvciAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydmb2N1cyddKTtcbn07XG5cbi8qKlxuICogT3BlbnMgdGhlIHNwZWNpZmllZCBVUkwgb24gdGhlIHRhcmdldC5cbiAqIFRoaXMgd29ya3MgYm90aCB3aXRoIHdlYiBhZGRyZXNzZXMgYW5kIFVSTCBzY2hlbWVzIHByZXNlbnQgb24gdGhlIHRhcmdldC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gb3BlblxuICovXG5taXNjQ29tbWFuZHMub3BlblVybCA9IGFzeW5jIGZ1bmN0aW9uIG9wZW5VcmwgKHVybCkge1xuICBsb2cuZGVidWcoYE9wZW5pbmcgVVJMICcke3VybH0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnb3BlbiddLCBbdXJsXSk7XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSBlbnRpcmUga2V5Y2hhaW4gb24gU2ltdWxhdG9yLlxuICovXG5taXNjQ29tbWFuZHMuY2xlYXJLZXljaGFpbiA9IGFzeW5jIGZ1bmN0aW9uIGNsZWFyS2V5Y2hhaW4gKCkge1xuICBsb2cuZGVidWcoYENsZWFyaW5nIGtleWNoYWluIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnY2xlYXIta2V5Y2hhaW4nXSk7XG59O1xuXG4vKipcbiAqIE92ZXJyaWRlcyBhIHNpbXVsYXRvcnMgbG9jYXRpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxhdGl0dWRlIFRoZSBsYXRpdHVkZSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBsb25naXR1ZGUgVGhlIGxvbmdpdHVkZSB2YWx1ZVxuICovXG5taXNjQ29tbWFuZHMuc2V0TG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBzZXRMb2NhdGlvbiAobGF0aXR1ZGUsIGxvbmdpdHVkZSkge1xuICBsb2cuZGVidWcoYFNldHRpbmcgbG9jYXRpb24gKCR7bGF0aXR1ZGV9LCAke2xvbmdpdHVkZX0pIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnc2V0LWxvY2F0aW9uJ10sIFtsYXRpdHVkZSwgbG9uZ2l0dWRlXSk7XG59O1xuXG4vKipcbiAqIFByb2dyYW1tYXRpY2FsbHkgYXBwcm92ZSBwZXJtaXNzaW9uIGZvciBhbiBhcHAgb24gU2ltdWxhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIEFwcGxpY2F0aW9uIGlkZW50aWZpZXIgdG8gc2V0IHRoZSBwZXJtaXNzaW9ucyBmb3JcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz59IHBlcm1pc3Npb25zIFRoZSBwZXJtaXNzaW9uKHMpIHRvIGFwcGx5LiBDYW4gYmVcbiAqIG9uZSBvZiB7cGhvdG9zLGNhbWVyYSxjYW1lcmF9XG4gKi9cbm1pc2NDb21tYW5kcy5hcHByb3ZlID0gYXN5bmMgZnVuY3Rpb24gYXBwcm92ZSAoYnVuZGxlSWQsIHBlcm1pc3Npb25zKSB7XG4gIGxvZy5kZWJ1ZyhgQXBwcm92aW5nIHBlcm1pc3Npb25zICgke0pTT04uc3RyaW5naWZ5KHBlcm1pc3Npb25zKX0pIGZvciAnJHtidW5kbGVJZH0nIGAgK1xuICAgIGBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBbJ2FwcHJvdmUnXTtcbiAgY29uc3QgYXJncyA9IFtdO1xuICBpZiAoXy5pc0FycmF5KHBlcm1pc3Npb25zKSkge1xuICAgIGFyZ3MucHVzaCguLi5wZXJtaXNzaW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgYXJncy5wdXNoKHBlcm1pc3Npb25zKTtcbiAgfVxuICBhcmdzLnB1c2goYnVuZGxlSWQpO1xuICBhd2FpdCB0aGlzLmV4ZWMoY29tbWFuZCwgYXJncyk7XG59O1xuXG4vKipcbiAqIE92ZXJ3cml0ZSB0aGUgc2ltdWxhdG9ycyBjb250YWN0cyBkYlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYlBhdGggRnVsbCBwYXRoIHRvIHRoZSBTUUxpdGUgZGIgY29udGFpbmluZyB0aGUgY29udGFjdHNcbiAqL1xubWlzY0NvbW1hbmRzLmFkZENvbnRhY3RzID0gYXN5bmMgZnVuY3Rpb24gYWRkQ29udGFjdHMgKGRiUGF0aCkge1xuICBsb2cuZGVidWcoYEFkZGluZyBjb250YWN0cyBmcm9tICgke2RiUGF0aH0pIHRvIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnY29udGFjdHMnLCAndXBkYXRlJ10sIFtkYlBhdGhdKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pc2NDb21tYW5kcztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFHQSxNQUFNRSxZQUFZLEdBQUcsQ0FBQyxDQUFDO0FBcUN2QkEsWUFBWSxDQUFDQyxjQUFjLEdBQUcsZUFBZUEsY0FBY0EsQ0FBQSxFQUFJO0VBQzdEQyxlQUFHLENBQUNDLEtBQUssQ0FBRSwwQkFBeUIsSUFBSSxDQUFDQyxJQUFLLEdBQUUsQ0FBQztFQUNqRCxNQUFNQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDeEQsT0FBT0MsSUFBSSxDQUFDQyxLQUFLLENBQUNILE1BQU0sQ0FBQztBQUMzQixDQUFDO0FBS0RMLFlBQVksQ0FBQ1MsY0FBYyxHQUFHLGVBQWVBLGNBQWNBLENBQUEsRUFBSTtFQUM3RFAsZUFBRyxDQUFDQyxLQUFLLENBQUUsdUJBQXNCLElBQUksQ0FBQ0MsSUFBSyxHQUFFLENBQUM7RUFDOUMsTUFBTSxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFRRE4sWUFBWSxDQUFDVSxPQUFPLEdBQUcsZUFBZUEsT0FBT0EsQ0FBRUMsR0FBRyxFQUFFO0VBQ2xEVCxlQUFHLENBQUNDLEtBQUssQ0FBRSxnQkFBZVEsR0FBSSxvQkFBbUIsSUFBSSxDQUFDUCxJQUFLLEdBQUUsQ0FBQztFQUM5RCxNQUFNLElBQUksQ0FBQ0UsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUtEWCxZQUFZLENBQUNZLGFBQWEsR0FBRyxlQUFlQSxhQUFhQSxDQUFBLEVBQUk7RUFDM0RWLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLG9DQUFtQyxJQUFJLENBQUNDLElBQUssR0FBRSxDQUFDO0VBQzNELE1BQU0sSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFRRE4sWUFBWSxDQUFDYSxXQUFXLEdBQUcsZUFBZUEsV0FBV0EsQ0FBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUU7RUFDMUViLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLHFCQUFvQlcsUUFBUyxLQUFJQyxTQUFVLG9CQUFtQixJQUFJLENBQUNYLElBQUssR0FBRSxDQUFDO0VBQ3RGLE1BQU0sSUFBSSxDQUFDRSxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDUSxRQUFRLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFTRGYsWUFBWSxDQUFDZ0IsT0FBTyxHQUFHLGVBQWVBLE9BQU9BLENBQUVDLFFBQVEsRUFBRUMsV0FBVyxFQUFFO0VBQ3BFaEIsZUFBRyxDQUFDQyxLQUFLLENBQUUsMEJBQXlCSSxJQUFJLENBQUNZLFNBQVMsQ0FBQ0QsV0FBVyxDQUFFLFVBQVNELFFBQVMsSUFBRyxHQUNsRixrQkFBaUIsSUFBSSxDQUFDYixJQUFLLEdBQUUsQ0FBQztFQUNqQyxNQUFNZ0IsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDO0VBQzNCLE1BQU1DLElBQUksR0FBRyxFQUFFO0VBQ2YsSUFBSUMsZUFBQyxDQUFDQyxPQUFPLENBQUNMLFdBQVcsQ0FBQyxFQUFFO0lBQzFCRyxJQUFJLENBQUNHLElBQUksQ0FBQyxHQUFHTixXQUFXLENBQUM7RUFDM0IsQ0FBQyxNQUFNO0lBQ0xHLElBQUksQ0FBQ0csSUFBSSxDQUFDTixXQUFXLENBQUM7RUFDeEI7RUFDQUcsSUFBSSxDQUFDRyxJQUFJLENBQUNQLFFBQVEsQ0FBQztFQUNuQixNQUFNLElBQUksQ0FBQ1gsSUFBSSxDQUFDYyxPQUFPLEVBQUVDLElBQUksQ0FBQztBQUNoQyxDQUFDO0FBT0RyQixZQUFZLENBQUN5QixXQUFXLEdBQUcsZUFBZUEsV0FBV0EsQ0FBRUMsTUFBTSxFQUFFO0VBQzdEeEIsZUFBRyxDQUFDQyxLQUFLLENBQUUseUJBQXdCdUIsTUFBTyxvQkFBbUIsSUFBSSxDQUFDdEIsSUFBSyxHQUFFLENBQUM7RUFDMUUsTUFBTSxJQUFJLENBQUNFLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDb0IsTUFBTSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FFYTNCLFlBQVk7QUFBQTRCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBRixRQUFBIn0=