{"version":3,"file":"simulator.js","names":["_simulatorXcode","_interopRequireDefault","require","_simulatorXcode2","_simulatorXcode3","_simulatorXcode4","_simulatorXcode5","_simulatorXcode6","_simulatorXcode7","_simulatorXcode8","_utils","_appiumXcode","_logger","MIN_SUPPORTED_XCODE_VERSION","handleUnsupportedXcode","xcodeVersion","major","Error","versionString","getSimulator","udid","opts","platform","checkExistence","devicesSetPath","xcode","getVersion","simulatorInfo","getSimulatorInfo","setLoggingPlatform","log","info","SimClass","SimulatorXcode8","minor","SimulatorXcode9","SimulatorXcode93","SimulatorXcode10","SimulatorXcode11","SimulatorXcode11_4","SimulatorXcode14","SimulatorXcode15","result"],"sources":["../../lib/simulator.js"],"sourcesContent":["import SimulatorXcode8 from './simulator-xcode-8';\nimport SimulatorXcode9 from './simulator-xcode-9';\nimport SimulatorXcode93 from './simulator-xcode-9.3';\nimport SimulatorXcode10 from './simulator-xcode-10';\nimport SimulatorXcode11 from './simulator-xcode-11';\nimport SimulatorXcode11_4 from './simulator-xcode-11.4';\nimport SimulatorXcode14 from './simulator-xcode-14';\nimport SimulatorXcode15 from './simulator-xcode-15';\nimport { getSimulatorInfo } from './utils';\nimport xcode from 'appium-xcode';\nimport { log, setLoggingPlatform } from './logger';\n\nconst MIN_SUPPORTED_XCODE_VERSION = 8;\n\nfunction handleUnsupportedXcode (xcodeVersion) {\n  if (xcodeVersion.major < MIN_SUPPORTED_XCODE_VERSION) {\n    throw new Error(\n      `Tried to use an iOS simulator with xcode version ${xcodeVersion.versionString} but only Xcode version ` +\n      `${MIN_SUPPORTED_XCODE_VERSION} and up are supported`\n    );\n  }\n  return xcodeVersion;\n}\n\n/**\n * @typedef {Object} SimulatorLookupOptions\n * @property {?string} platform [iOS] - The name of the simulator platform\n * @property {?boolean} checkExistence [true] - Set it to `false` in order to\n * skip simulator existence verification\n * @property {?string} devicesSetPath - The full path to the devices set where\n * the current simulator is located. `null` value means that the default path is\n * used, which is usually `~/Library/Developer/CoreSimulator/Devices`\n */\n\n/**\n * Finds and returns the corresponding Simulator instance for the given ID.\n *\n * @param {string} udid - The ID of an existing Simulator.\n * @param {?SimulatorLookupOptions} opts\n * @throws {Error} If the Simulator with given udid does not exist in devices list.\n *   If you want to create a new simulator, you can use the `createDevice()` method of\n *   [node-simctl](github.com/appium/node-simctl).\n * @return {object} Simulator object associated with the udid passed in.\n */\nasync function getSimulator (udid, opts = {}) {\n  let {\n    platform = 'iOS',\n    checkExistence = true,\n    devicesSetPath,\n  } = opts;\n\n  const xcodeVersion = handleUnsupportedXcode(await xcode.getVersion(true));\n  if (checkExistence) {\n    const simulatorInfo = await getSimulatorInfo(udid, {\n      devicesSetPath\n    });\n\n    if (!simulatorInfo) {\n      throw new Error(`No sim found with udid '${udid}'`);\n    }\n\n    platform = simulatorInfo.platform;\n  }\n\n  // make sure we have the right logging prefix\n  setLoggingPlatform(platform);\n\n  log.info(\n    `Constructing ${platform} simulator for Xcode version ${xcodeVersion.versionString} with udid '${udid}'`\n  );\n  let SimClass;\n  switch (xcodeVersion.major) {\n    case 8:\n      SimClass = SimulatorXcode8;\n      break;\n    case 9:\n      SimClass = xcodeVersion.minor < 3 ? SimulatorXcode9 : SimulatorXcode93;\n      break;\n    case 10:\n      SimClass = SimulatorXcode10;\n      break;\n    case 11:\n      SimClass = xcodeVersion.minor < 4 ? SimulatorXcode11 : SimulatorXcode11_4;\n      break;\n    case 12:\n    case 13:\n      SimClass = SimulatorXcode11_4;\n      break;\n    case 14:\n      SimClass = SimulatorXcode14;\n      break;\n    case 15:\n    default:\n      SimClass = SimulatorXcode15;\n      break;\n  }\n\n  const result = new SimClass(udid, xcodeVersion);\n  if (devicesSetPath) {\n    result.devicesSetPath = devicesSetPath;\n  }\n  return result;\n}\n\nexport { getSimulator };\n"],"mappings":";;;;;;;;AAAA,IAAAA,eAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,gBAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,gBAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,gBAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,gBAAA,GAAAN,sBAAA,CAAAC,OAAA;AACA,IAAAM,gBAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,gBAAA,GAAAR,sBAAA,CAAAC,OAAA;AACA,IAAAQ,MAAA,GAAAR,OAAA;AACA,IAAAS,YAAA,GAAAV,sBAAA,CAAAC,OAAA;AACA,IAAAU,OAAA,GAAAV,OAAA;AAEA,MAAMW,2BAA2B,GAAG,CAAC;AAErC,SAASC,sBAAsBA,CAAEC,YAAY,EAAE;EAC7C,IAAIA,YAAY,CAACC,KAAK,GAAGH,2BAA2B,EAAE;IACpD,MAAM,IAAII,KAAK,CACZ,oDAAmDF,YAAY,CAACG,aAAc,0BAAyB,GACvG,GAAEL,2BAA4B,uBACjC,CAAC;EACH;EACA,OAAOE,YAAY;AACrB;AAsBA,eAAeI,YAAYA,CAAEC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAC5C,IAAI;IACFC,QAAQ,GAAG,KAAK;IAChBC,cAAc,GAAG,IAAI;IACrBC;EACF,CAAC,GAAGH,IAAI;EAER,MAAMN,YAAY,GAAGD,sBAAsB,CAAC,MAAMW,oBAAK,CAACC,UAAU,CAAC,IAAI,CAAC,CAAC;EACzE,IAAIH,cAAc,EAAE;IAClB,MAAMI,aAAa,GAAG,MAAM,IAAAC,uBAAgB,EAACR,IAAI,EAAE;MACjDI;IACF,CAAC,CAAC;IAEF,IAAI,CAACG,aAAa,EAAE;MAClB,MAAM,IAAIV,KAAK,CAAE,2BAA0BG,IAAK,GAAE,CAAC;IACrD;IAEAE,QAAQ,GAAGK,aAAa,CAACL,QAAQ;EACnC;EAGA,IAAAO,0BAAkB,EAACP,QAAQ,CAAC;EAE5BQ,WAAG,CAACC,IAAI,CACL,gBAAeT,QAAS,gCAA+BP,YAAY,CAACG,aAAc,eAAcE,IAAK,GACxG,CAAC;EACD,IAAIY,QAAQ;EACZ,QAAQjB,YAAY,CAACC,KAAK;IACxB,KAAK,CAAC;MACJgB,QAAQ,GAAGC,uBAAe;MAC1B;IACF,KAAK,CAAC;MACJD,QAAQ,GAAGjB,YAAY,CAACmB,KAAK,GAAG,CAAC,GAAGC,wBAAe,GAAGC,wBAAgB;MACtE;IACF,KAAK,EAAE;MACLJ,QAAQ,GAAGK,wBAAgB;MAC3B;IACF,KAAK,EAAE;MACLL,QAAQ,GAAGjB,YAAY,CAACmB,KAAK,GAAG,CAAC,GAAGI,wBAAgB,GAAGC,wBAAkB;MACzE;IACF,KAAK,EAAE;IACP,KAAK,EAAE;MACLP,QAAQ,GAAGO,wBAAkB;MAC7B;IACF,KAAK,EAAE;MACLP,QAAQ,GAAGQ,wBAAgB;MAC3B;IACF,KAAK,EAAE;IACP;MACER,QAAQ,GAAGS,wBAAgB;MAC3B;EACJ;EAEA,MAAMC,MAAM,GAAG,IAAIV,QAAQ,CAACZ,IAAI,EAAEL,YAAY,CAAC;EAC/C,IAAIS,cAAc,EAAE;IAClBkB,MAAM,CAAClB,cAAc,GAAGA,cAAc;EACxC;EACA,OAAOkB,MAAM;AACf"}