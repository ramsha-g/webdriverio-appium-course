"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSimulator = getSimulator;
require("source-map-support/register");
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-8"));
var _simulatorXcode2 = _interopRequireDefault(require("./simulator-xcode-9"));
var _simulatorXcode3 = _interopRequireDefault(require("./simulator-xcode-9.3"));
var _simulatorXcode4 = _interopRequireDefault(require("./simulator-xcode-10"));
var _simulatorXcode5 = _interopRequireDefault(require("./simulator-xcode-11"));
var _simulatorXcode6 = _interopRequireDefault(require("./simulator-xcode-11.4"));
var _simulatorXcode7 = _interopRequireDefault(require("./simulator-xcode-14"));
var _simulatorXcode8 = _interopRequireDefault(require("./simulator-xcode-15"));
var _utils = require("./utils");
var _appiumXcode = _interopRequireDefault(require("appium-xcode"));
var _logger = require("./logger");
const MIN_SUPPORTED_XCODE_VERSION = 8;
function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < MIN_SUPPORTED_XCODE_VERSION) {
    throw new Error(`Tried to use an iOS simulator with xcode version ${xcodeVersion.versionString} but only Xcode version ` + `${MIN_SUPPORTED_XCODE_VERSION} and up are supported`);
  }
  return xcodeVersion;
}
async function getSimulator(udid, opts = {}) {
  let {
    platform = 'iOS',
    checkExistence = true,
    devicesSetPath
  } = opts;
  const xcodeVersion = handleUnsupportedXcode(await _appiumXcode.default.getVersion(true));
  if (checkExistence) {
    const simulatorInfo = await (0, _utils.getSimulatorInfo)(udid, {
      devicesSetPath
    });
    if (!simulatorInfo) {
      throw new Error(`No sim found with udid '${udid}'`);
    }
    platform = simulatorInfo.platform;
  }
  (0, _logger.setLoggingPlatform)(platform);
  _logger.log.info(`Constructing ${platform} simulator for Xcode version ${xcodeVersion.versionString} with udid '${udid}'`);
  let SimClass;
  switch (xcodeVersion.major) {
    case 8:
      SimClass = _simulatorXcode.default;
      break;
    case 9:
      SimClass = xcodeVersion.minor < 3 ? _simulatorXcode2.default : _simulatorXcode3.default;
      break;
    case 10:
      SimClass = _simulatorXcode4.default;
      break;
    case 11:
      SimClass = xcodeVersion.minor < 4 ? _simulatorXcode5.default : _simulatorXcode6.default;
      break;
    case 12:
    case 13:
      SimClass = _simulatorXcode6.default;
      break;
    case 14:
      SimClass = _simulatorXcode7.default;
      break;
    case 15:
    default:
      SimClass = _simulatorXcode8.default;
      break;
  }
  const result = new SimClass(udid, xcodeVersion);
  if (devicesSetPath) {
    result.devicesSetPath = devicesSetPath;
  }
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,