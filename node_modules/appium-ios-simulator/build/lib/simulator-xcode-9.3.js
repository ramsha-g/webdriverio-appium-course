"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9"));
var _teen_process = require("teen_process");
var _logger = _interopRequireDefault(require("./logger"));
class SimulatorXcode93 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.webInspectorSocket = null;
  }
  async getWebInspectorSocket() {
    if (this.webInspectorSocket) {
      return this.webInspectorSocket;
    }
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-aUc', 'launchd_sim']);
    const udidPattern = `([0-9]{1,5}).+${this.udid}`;
    const udidMatch = stdout.match(new RegExp(udidPattern));
    if (!udidMatch) {
      _logger.default.debug(`Failed to get Web Inspector socket. lsof result: ${stdout}`);
      return null;
    }
    const pidPattern = `${udidMatch[1]}.+\\s+(\\S+com\\.apple\\.webinspectord_sim\\.socket)`;
    const pidMatch = stdout.match(new RegExp(pidPattern));
    if (!pidMatch) {
      _logger.default.debug(`Failed to get Web Inspector socket. lsof result: ${stdout}`);
      return null;
    }
    this.webInspectorSocket = pidMatch[1];
    return this.webInspectorSocket;
  }
}
var _default = SimulatorXcode93;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc2ltdWxhdG9yWGNvZGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90ZWVuX3Byb2Nlc3MiLCJfbG9nZ2VyIiwiU2ltdWxhdG9yWGNvZGU5MyIsIlNpbXVsYXRvclhjb2RlOSIsImNvbnN0cnVjdG9yIiwidWRpZCIsInhjb2RlVmVyc2lvbiIsIndlYkluc3BlY3RvclNvY2tldCIsImdldFdlYkluc3BlY3RvclNvY2tldCIsInN0ZG91dCIsImV4ZWMiLCJ1ZGlkUGF0dGVybiIsInVkaWRNYXRjaCIsIm1hdGNoIiwiUmVnRXhwIiwibG9nIiwiZGVidWciLCJwaWRQYXR0ZXJuIiwicGlkTWF0Y2giLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vbGliL3NpbXVsYXRvci14Y29kZS05LjMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlOSBmcm9tICcuL3NpbXVsYXRvci14Y29kZS05JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cblxuY2xhc3MgU2ltdWxhdG9yWGNvZGU5MyBleHRlbmRzIFNpbXVsYXRvclhjb2RlOSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCB4Y29kZVZlcnNpb24pIHtcbiAgICBzdXBlcih1ZGlkLCB4Y29kZVZlcnNpb24pO1xuXG4gICAgdGhpcy53ZWJJbnNwZWN0b3JTb2NrZXQgPSBudWxsO1xuICB9XG5cbiAgLypcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBnZXRXZWJJbnNwZWN0b3JTb2NrZXQgKCkge1xuICAgIGlmICh0aGlzLndlYkluc3BlY3RvclNvY2tldCkge1xuICAgICAgcmV0dXJuIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0O1xuICAgIH1cblxuICAgIC8vIGxzb2YgLWFVYyBsYXVuY2hkX3NpbSBnaXZlcyBhIHNldCBvZiByZWNvcmRzIGxpa2VcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS1pb3Mtc2ltdWxhdG9yL2NvbW1pdC9jMDA5MDFhOWRkZWExNzhjNTU4MWE3YTU3ZDk2ZDhjZWUzZjE3YzU5I2RpZmYtMmJlMDlkZDJlYTAxY2ZkNmJiYmQ3M2UxMGJjNDY4ZGE3ODJhMjk3MzY1ZWVjNzA2OTk5ZmMzNzA5YzAxNDc4ZFIxMDJcbiAgICAvLyB0aGVzZSBfYXBwZWFyXyB0byBhbHdheXMgYmUgZ3JvdXBlZCB0b2dldGhlciBieSBQSUQgZm9yIGVhY2ggc2ltdWxhdG9yLlxuICAgIC8vIFRoZXJlZm9yZSwgYnkgb2J0YWluaW5nIHNpbXVsYXRvciBQSUQgd2l0aCBhbiBleHBlY3RlZCBzaW11bGF0b3IgVURJRCxcbiAgICAvLyB3ZSBjYW4gZ2V0IHRoZSBjb3JyZWN0IGBjb20uYXBwbGUud2ViaW5zcGVjdG9yZF9zaW0uc29ja2V0YFxuICAgIC8vIHdpdGhvdXQgZGVwZW5kaW5nIG9uIHRoZSBvcmRlciBvZiBgbHNvZiAtYVVjIGxhdW5jaGRfc2ltYCByZXN1bHQuXG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKCdsc29mJywgWyctYVVjJywgJ2xhdW5jaGRfc2ltJ10pO1xuICAgIGNvbnN0IHVkaWRQYXR0ZXJuID0gYChbMC05XXsxLDV9KS4rJHt0aGlzLnVkaWR9YDtcbiAgICBjb25zdCB1ZGlkTWF0Y2ggPSBzdGRvdXQubWF0Y2gobmV3IFJlZ0V4cCh1ZGlkUGF0dGVybikpO1xuICAgIGlmICghdWRpZE1hdGNoKSB7XG4gICAgICBsb2cuZGVidWcoYEZhaWxlZCB0byBnZXQgV2ViIEluc3BlY3RvciBzb2NrZXQuIGxzb2YgcmVzdWx0OiAke3N0ZG91dH1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBpZFBhdHRlcm4gPSBgJHt1ZGlkTWF0Y2hbMV19LitcXFxccysoXFxcXFMrY29tXFxcXC5hcHBsZVxcXFwud2ViaW5zcGVjdG9yZF9zaW1cXFxcLnNvY2tldClgO1xuICAgIGNvbnN0IHBpZE1hdGNoID0gc3Rkb3V0Lm1hdGNoKG5ldyBSZWdFeHAocGlkUGF0dGVybikpO1xuICAgIGlmICghcGlkTWF0Y2gpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgRmFpbGVkIHRvIGdldCBXZWIgSW5zcGVjdG9yIHNvY2tldC4gbHNvZiByZXN1bHQ6ICR7c3Rkb3V0fWApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0ID0gcGlkTWF0Y2hbMV07XG4gICAgcmV0dXJuIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlOTM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsZUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBR0EsTUFBTUcsZ0JBQWdCLFNBQVNDLHVCQUFlLENBQUM7RUFDN0NDLFdBQVdBLENBQUVDLElBQUksRUFBRUMsWUFBWSxFQUFFO0lBQy9CLEtBQUssQ0FBQ0QsSUFBSSxFQUFFQyxZQUFZLENBQUM7SUFFekIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRyxJQUFJO0VBQ2hDO0VBS0EsTUFBTUMscUJBQXFCQSxDQUFBLEVBQUk7SUFDN0IsSUFBSSxJQUFJLENBQUNELGtCQUFrQixFQUFFO01BQzNCLE9BQU8sSUFBSSxDQUFDQSxrQkFBa0I7SUFDaEM7SUFRQSxNQUFNO01BQUNFO0lBQU0sQ0FBQyxHQUFHLE1BQU0sSUFBQUMsa0JBQUksRUFBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUQsTUFBTUMsV0FBVyxHQUFJLGlCQUFnQixJQUFJLENBQUNOLElBQUssRUFBQztJQUNoRCxNQUFNTyxTQUFTLEdBQUdILE1BQU0sQ0FBQ0ksS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDLENBQUM7SUFDdkQsSUFBSSxDQUFDQyxTQUFTLEVBQUU7TUFDZEcsZUFBRyxDQUFDQyxLQUFLLENBQUUsb0RBQW1EUCxNQUFPLEVBQUMsQ0FBQztNQUN2RSxPQUFPLElBQUk7SUFDYjtJQUVBLE1BQU1RLFVBQVUsR0FBSSxHQUFFTCxTQUFTLENBQUMsQ0FBQyxDQUFFLHNEQUFxRDtJQUN4RixNQUFNTSxRQUFRLEdBQUdULE1BQU0sQ0FBQ0ksS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDckQsSUFBSSxDQUFDQyxRQUFRLEVBQUU7TUFDYkgsZUFBRyxDQUFDQyxLQUFLLENBQUUsb0RBQW1EUCxNQUFPLEVBQUMsQ0FBQztNQUN2RSxPQUFPLElBQUk7SUFDYjtJQUNBLElBQUksQ0FBQ0Ysa0JBQWtCLEdBQUdXLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDckMsT0FBTyxJQUFJLENBQUNYLGtCQUFrQjtFQUNoQztBQUNGO0FBQUMsSUFBQVksUUFBQSxHQUVjakIsZ0JBQWdCO0FBQUFrQixPQUFBLENBQUFDLE9BQUEsR0FBQUYsUUFBQSJ9