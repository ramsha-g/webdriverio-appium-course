"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _teen_process = require("teen_process");
var _utils = require("./utils");
var _path = _interopRequireDefault(require("path"));
var _appiumXcode = require("appium-xcode");
var _support = require("@appium/support");
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _asyncbox = require("asyncbox");
var _events = require("events");
var _nodeSimctl = _interopRequireDefault(require("node-simctl"));
var _index = _interopRequireDefault(require("./extensions/index"));
const BOOT_COMPLETED_EVENT = 'bootCompleted';
const STARTUP_TIMEOUT_MS = 120 * 1000;
const UI_CLIENT_ACCESS_GUARD = new _asyncLock.default();
const UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';
class SimulatorXcode8 extends _events.EventEmitter {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.udid = String(udid);
    this.simctl = new _nodeSimctl.default({
      udid: this.udid
    });
    this.xcodeVersion = xcodeVersion;
    this._platformVersion = null;
    this.keychainPath = _path.default.resolve(this.getDir(), 'Library', 'Keychains');
    this._idb = null;
    this._locationMenu = 'Debug';
  }
  get uiClientBundleId() {
    return UI_CLIENT_BUNDLE_ID;
  }
  get devicesSetPath() {
    return this.simctl.devicesSetPath;
  }
  set devicesSetPath(value) {
    this.simctl.devicesSetPath = value;
  }
  async getUIClientPid() {
    let stdout;
    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('pgrep', ['-fn', `${_utils.SIMULATOR_APP_NAME}/Contents/MacOS/`]));
    } catch (e) {
      return null;
    }
    if (isNaN(parseInt(stdout, 10))) {
      return null;
    }
    stdout = stdout.trim();
    _logger.default.debug(`Got Simulator UI client PID: ${stdout}`);
    return stdout;
  }
  async isUIClientRunning() {
    return !_lodash.default.isNull(await this.getUIClientPid());
  }
  async getPlatformVersion() {
    if (!this._platformVersion) {
      const {
        sdk
      } = await this.stat();
      this._platformVersion = sdk;
    }
    return this._platformVersion;
  }
  getRootDir() {
    return _path.default.resolve(process.env.HOME, 'Library', 'Developer', 'CoreSimulator', 'Devices');
  }
  getDir() {
    return _path.default.resolve(this.getRootDir(), this.udid, 'data');
  }
  getLogDir() {
    return _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CoreSimulator', this.udid);
  }
  async stat() {
    for (const [sdk, deviceArr] of _lodash.default.toPairs(await this.simctl.getDevices())) {
      for (let device of deviceArr) {
        if (device.udid === this.udid) {
          device.sdk = sdk;
          return device;
        }
      }
    }
    return {};
  }
  async isFresh() {
    const cachesRoot = _path.default.resolve(this.getDir(), 'Library', 'Caches');
    return (await _support.fs.exists(cachesRoot)) ? (await _support.fs.glob('*', {
      cwd: cachesRoot,
      nosort: true,
      strict: false
    })).length === 0 : true;
  }
  async isRunning() {
    try {
      await this.simctl.getEnv('dummy');
      return true;
    } catch (e) {
      return false;
    }
  }
  async isShutdown() {
    try {
      await this.simctl.getEnv('dummy');
      return false;
    } catch (e) {
      return _lodash.default.includes(e.stderr, 'Current state: Shutdown');
    }
  }
  async startUIClient(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);
    _lodash.default.defaultsDeep(opts, {
      scaleFactor: null,
      startupTimeout: this.startupTimeout
    });
    const simulatorApp = _path.default.resolve(await (0, _appiumXcode.getPath)(), 'Applications', _utils.SIMULATOR_APP_NAME);
    const args = ['-Fn', simulatorApp, '--args', '-CurrentDeviceUDID', this.udid];
    if (opts.scaleFactor) {
      const {
        name
      } = await this.stat();
      const formattedDeviceName = name.replace(/\s+/g, '-');
      const argumentName = `-SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.${formattedDeviceName}`;
      args.push(argumentName, opts.scaleFactor);
    }
    _logger.default.info(`Starting Simulator UI with command: open ${args.join(' ')}`);
    try {
      await (0, _teen_process.exec)('open', args, {
        timeout: opts.startupTimeout
      });
    } catch (err) {
      if (!(err.stdout || '').includes('-10825') && !(err.stderr || '').includes('-10825')) {
        throw err;
      }
      _logger.default.warn(`Error while opening UI: ${err.stdout || err.stderr}. Continuing`);
    }
  }
  async run(opts = {}) {
    opts = Object.assign({
      startupTimeout: this.startupTimeout
    }, opts);
    const isServerRunning = await this.isRunning();
    const isUIClientRunning = await this.isUIClientRunning();
    if (isServerRunning && isUIClientRunning) {
      _logger.default.info(`Both Simulator with UDID ${this.udid} and the UI client are currently running`);
      return;
    }
    const timer = new _support.timing.Timer().start();
    try {
      await this.shutdown();
    } catch (err) {
      _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
    }
    await this.startUIClient(opts);
    await this.waitForBoot(opts.startupTimeout);
    _logger.default.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }
  async clean() {
    _logger.default.info(`Cleaning simulator ${this.udid}`);
    await this.simctl.eraseDevice(10000);
  }
  async shutdown(opts = {}) {
    if (await this.isShutdown()) {
      return;
    }
    await (0, _asyncbox.retryInterval)(5, 500, this.simctl.shutdownDevice.bind(this.simctl));
    const waitMs = parseInt(opts.timeout, 10);
    if (waitMs > 0) {
      try {
        await (0, _asyncbox.waitForCondition)(async () => await this.isShutdown(), {
          waitMs,
          intervalMs: 100
        });
      } catch (err) {
        throw new Error(`Simulator is not in 'Shutdown' state after ${waitMs}ms`);
      }
    }
  }
  async delete() {
    await this.simctl.deleteDevice();
  }
  async _activateWindow() {
    const pid = await this.getUIClientPid();
    if (pid) {
      try {
        return await (0, _utils.activateApp)(pid);
      } catch (e) {
        _logger.default.debug(e.stderr || e.message);
      }
    }
    return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
        end tell
      end tell
    `;
  }
  async executeUIClientScript(appleScript) {
    const windowActivationScript = await this._activateWindow();
    const resultScript = `${windowActivationScript ? windowActivationScript + '\n' : ''}${appleScript}`;
    _logger.default.debug(`Executing UI Apple Script on Simulator with UDID ${this.udid}: ${resultScript}`);
    return await UI_CLIENT_ACCESS_GUARD.acquire(_utils.SIMULATOR_APP_NAME, async () => {
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('osascript', ['-e', resultScript]);
        return stdout;
      } catch (err) {
        _logger.default.errorAndThrow(`Could not complete operation. Make sure Simulator UI is running and the parent Appium application (e. g. Appium.app or Terminal.app) ` + `is present in System Preferences > Security & Privacy > Privacy > Accessibility list. If the operation is still unsuccessful then ` + `it is not supported by this Simulator. Original error: ${err.message}`);
      }
    });
  }
  async ps() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['launchctl', 'print', 'system']);
    const servicesMatch = /^\s*services\s*=\s*{([^}]+)/m.exec(stdout);
    if (!servicesMatch) {
      _logger.default.debug(stdout);
      throw new Error(`The list of active processes cannot be retrieved`);
    }
    const result = [];
    const pattern = /^\s*(\d+)\s+[\d-]+\s+([\w\-.]+:)?([\w\-.]+)/gm;
    let match;
    while (match = pattern.exec(servicesMatch[1])) {
      result.push({
        pid: parseInt(match[1], 10),
        group: _lodash.default.trimEnd(match[2], ':') || null,
        name: match[3]
      });
    }
    return result;
  }
  async getWebInspectorSocket() {
    return null;
  }
  set idb(value) {
    this._idb = value;
  }
  get idb() {
    return this._idb;
  }
  async killUIClient(opts = {}) {
    let {
      pid,
      signal = 2
    } = opts;
    pid = pid || (await this.getUIClientPid());
    if (!pid) {
      return false;
    }
    _logger.default.debug(`Sending ${signal} kill signal to Simulator UI client with PID ${pid}`);
    try {
      await (0, _teen_process.exec)('kill', [`-${signal}`, pid]);
      return true;
    } catch (e) {
      if (e.code === 1) {
        return false;
      }
      throw new Error(`Cannot kill the Simulator UI client. Original error: ${e.message}`);
    }
  }
  get startupTimeout() {
    return STARTUP_TIMEOUT_MS;
  }
  async waitForBoot(startupTimeout) {
    await this.simctl.startBootMonitor({
      timeout: startupTimeout
    });
    this.emit(BOOT_COMPLETED_EVENT);
  }
}
for (const [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  SimulatorXcode8.prototype[cmd] = fn;
}
var _default = SimulatorXcode8;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9nZ2VyIiwiX3RlZW5fcHJvY2VzcyIsIl91dGlscyIsIl9wYXRoIiwiX2FwcGl1bVhjb2RlIiwiX3N1cHBvcnQiLCJfYXN5bmNMb2NrIiwiX2FzeW5jYm94IiwiX2V2ZW50cyIsIl9ub2RlU2ltY3RsIiwiX2luZGV4IiwiQk9PVF9DT01QTEVURURfRVZFTlQiLCJTVEFSVFVQX1RJTUVPVVRfTVMiLCJVSV9DTElFTlRfQUNDRVNTX0dVQVJEIiwiQXN5bmNMb2NrIiwiVUlfQ0xJRU5UX0JVTkRMRV9JRCIsIlNpbXVsYXRvclhjb2RlOCIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwidWRpZCIsInhjb2RlVmVyc2lvbiIsIlN0cmluZyIsInNpbWN0bCIsIlNpbWN0bCIsIl9wbGF0Zm9ybVZlcnNpb24iLCJrZXljaGFpblBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImdldERpciIsIl9pZGIiLCJfbG9jYXRpb25NZW51IiwidWlDbGllbnRCdW5kbGVJZCIsImRldmljZXNTZXRQYXRoIiwidmFsdWUiLCJnZXRVSUNsaWVudFBpZCIsInN0ZG91dCIsImV4ZWMiLCJTSU1VTEFUT1JfQVBQX05BTUUiLCJlIiwiaXNOYU4iLCJwYXJzZUludCIsInRyaW0iLCJsb2ciLCJkZWJ1ZyIsImlzVUlDbGllbnRSdW5uaW5nIiwiXyIsImlzTnVsbCIsImdldFBsYXRmb3JtVmVyc2lvbiIsInNkayIsInN0YXQiLCJnZXRSb290RGlyIiwicHJvY2VzcyIsImVudiIsIkhPTUUiLCJnZXRMb2dEaXIiLCJkZXZpY2VBcnIiLCJ0b1BhaXJzIiwiZ2V0RGV2aWNlcyIsImRldmljZSIsImlzRnJlc2giLCJjYWNoZXNSb290IiwiZnMiLCJleGlzdHMiLCJnbG9iIiwiY3dkIiwibm9zb3J0Iiwic3RyaWN0IiwibGVuZ3RoIiwiaXNSdW5uaW5nIiwiZ2V0RW52IiwiaXNTaHV0ZG93biIsImluY2x1ZGVzIiwic3RkZXJyIiwic3RhcnRVSUNsaWVudCIsIm9wdHMiLCJjbG9uZURlZXAiLCJkZWZhdWx0c0RlZXAiLCJzY2FsZUZhY3RvciIsInN0YXJ0dXBUaW1lb3V0Iiwic2ltdWxhdG9yQXBwIiwiZ2V0WGNvZGVQYXRoIiwiYXJncyIsIm5hbWUiLCJmb3JtYXR0ZWREZXZpY2VOYW1lIiwicmVwbGFjZSIsImFyZ3VtZW50TmFtZSIsInB1c2giLCJpbmZvIiwiam9pbiIsInRpbWVvdXQiLCJlcnIiLCJ3YXJuIiwicnVuIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNTZXJ2ZXJSdW5uaW5nIiwidGltZXIiLCJ0aW1pbmciLCJUaW1lciIsInN0YXJ0Iiwic2h1dGRvd24iLCJtZXNzYWdlIiwid2FpdEZvckJvb3QiLCJnZXREdXJhdGlvbiIsImFzU2Vjb25kcyIsInRvRml4ZWQiLCJjbGVhbiIsImVyYXNlRGV2aWNlIiwicmV0cnlJbnRlcnZhbCIsInNodXRkb3duRGV2aWNlIiwiYmluZCIsIndhaXRNcyIsIndhaXRGb3JDb25kaXRpb24iLCJpbnRlcnZhbE1zIiwiRXJyb3IiLCJkZWxldGUiLCJkZWxldGVEZXZpY2UiLCJfYWN0aXZhdGVXaW5kb3ciLCJwaWQiLCJhY3RpdmF0ZUFwcCIsImV4ZWN1dGVVSUNsaWVudFNjcmlwdCIsImFwcGxlU2NyaXB0Iiwid2luZG93QWN0aXZhdGlvblNjcmlwdCIsInJlc3VsdFNjcmlwdCIsImFjcXVpcmUiLCJlcnJvckFuZFRocm93IiwicHMiLCJzcGF3blByb2Nlc3MiLCJzZXJ2aWNlc01hdGNoIiwicmVzdWx0IiwicGF0dGVybiIsIm1hdGNoIiwiZ3JvdXAiLCJ0cmltRW5kIiwiZ2V0V2ViSW5zcGVjdG9yU29ja2V0IiwiaWRiIiwia2lsbFVJQ2xpZW50Iiwic2lnbmFsIiwiY29kZSIsInN0YXJ0Qm9vdE1vbml0b3IiLCJlbWl0IiwiY21kIiwiZm4iLCJleHRlbnNpb25zIiwicHJvdG90eXBlIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zaW11bGF0b3IteGNvZGUtOC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IGFjdGl2YXRlQXBwLCBTSU1VTEFUT1JfQVBQX05BTUUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZ2V0UGF0aCBhcyBnZXRYY29kZVBhdGggfSBmcm9tICdhcHBpdW0teGNvZGUnO1xuaW1wb3J0IHsgZnMsIHRpbWluZyB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCwgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgU2ltY3RsIGZyb20gJ25vZGUtc2ltY3RsJztcbmltcG9ydCBleHRlbnNpb25zIGZyb20gJy4vZXh0ZW5zaW9ucy9pbmRleCc7XG5cbi8qXG4gKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgYXMgc29vbiBhcyBpT1MgU2ltdWxhdG9yXG4gKiBoYXMgZmluaXNoZWQgYm9vdGluZyBhbmQgaXQgaXMgcmVhZHkgdG8gYWNjZXB0IHhjcnVuIGNvbW1hbmRzLlxuICogVGhlIGV2ZW50IGhhbmRsZXIgaXMgY2FsbGVkIGFmdGVyICdydW4nIG1ldGhvZCBpcyBjb21wbGV0ZWRcbiAqIGZvciBYY29kZSA3IGFuZCBvbGRlciBhbmQgaXMgb25seSB1c2VmdWwgaW4gWGNvZGUgOCssXG4gKiBzaW5jZSBvbmUgY2FuIHN0YXJ0IGRvaW5nIHN0dWZmIChmb3IgZXhhbXBsZSBpbnN0YWxsL3VuaW5zdGFsbCBhbiBhcHApIGluIHBhcmFsbGVsXG4gKiB3aXRoIFNpbXVsYXRvciBVSSBzdGFydHVwLCB3aGljaCBzaG9ydGVucyBzZXNzaW9uIHN0YXJ0dXAgdGltZS5cbiAqL1xuY29uc3QgQk9PVF9DT01QTEVURURfRVZFTlQgPSAnYm9vdENvbXBsZXRlZCc7XG5cbmNvbnN0IFNUQVJUVVBfVElNRU9VVF9NUyA9IDEyMCAqIDEwMDA7XG5jb25zdCBVSV9DTElFTlRfQUNDRVNTX0dVQVJEID0gbmV3IEFzeW5jTG9jaygpO1xuY29uc3QgVUlfQ0xJRU5UX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUuaXBob25lc2ltdWxhdG9yJztcblxuXG5jbGFzcyBTaW11bGF0b3JYY29kZTggZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgb2JqZWN0IHdpdGggdGhlIGB1ZGlkYCBhbmQgdmVyc2lvbiBvZiBYY29kZS4gVXNlIHRoZSBleHBvcnRlZCBgZ2V0U2ltdWxhdG9yKHVkaWQpYCBtZXRob2QgaW5zdGVhZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgLSBUaGUgU2ltdWxhdG9yIElELlxuICAgKiBAcGFyYW0ge29iamVjdH0geGNvZGVWZXJzaW9uIC0gVGhlIHRhcmdldCBYY29kZSB2ZXJzaW9uIGluIGZvcm1hdCB7bWFqb3IsIG1pbm9yLCBidWlsZH0uXG4gICAqL1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcblxuICAgIHRoaXMudWRpZCA9IFN0cmluZyh1ZGlkKTtcbiAgICB0aGlzLnNpbWN0bCA9IG5ldyBTaW1jdGwoe1xuICAgICAgdWRpZDogdGhpcy51ZGlkLFxuICAgIH0pO1xuICAgIHRoaXMueGNvZGVWZXJzaW9uID0geGNvZGVWZXJzaW9uO1xuXG4gICAgLy8gcGxhdGZvcm1WZXJzaW9uIGNhbm5vdCBiZSBmb3VuZCBpbml0aWFsbHksIHNpbmNlIGdldHRpbmcgaXQgaGFzIHNpZGUgZWZmZWN0cyBmb3JcbiAgICAvLyBvdXIgbG9naWMgZm9yIGZpZ3VyaW5nIG91dCBpZiBhIHNpbSBoYXMgYmVlbiBydW5cbiAgICAvLyBpdCB3aWxsIGJlIHNldCB3aGVuIGl0IGlzIG5lZWRlZFxuICAgIHRoaXMuX3BsYXRmb3JtVmVyc2lvbiA9IG51bGw7XG5cbiAgICB0aGlzLmtleWNoYWluUGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLmdldERpcigpLCAnTGlicmFyeScsICdLZXljaGFpbnMnKTtcbiAgICB0aGlzLl9pZGIgPSBudWxsO1xuXG4gICAgLy8gZm9yIHNldHRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIEFwcGxlU2NyaXB0LCB0aGUgdG9wLWxldmVsIG1lbnUgdGhyb3VnaCB3aGljaFxuICAgIC8vIHRoZSAnTG9jYXRpb24nIG9wdGlvbiBpcyBmb3VuZFxuICAgIHRoaXMuX2xvY2F0aW9uTWVudSA9ICdEZWJ1Zyc7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfSBCdW5kbGUgaWRlbnRpZmllciBvZiBTaW11bGF0b3IgVUkgY2xpZW50LlxuICAgKi9cbiAgZ2V0IHVpQ2xpZW50QnVuZGxlSWQgKCkge1xuICAgIHJldHVybiBVSV9DTElFTlRfQlVORExFX0lEO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmdWxsIHBhdGggdG8gdGhlIGRldmljZXMgc2V0IHdoZXJlIHRoZSBjdXJyZW50IHNpbXVsYXRvciBpcyBsb2NhdGVkLlxuICAgKiBgbnVsbGAgdmFsdWUgbWVhbnMgdGhhdCB0aGUgZGVmYXVsdCBwYXRoIGlzIHVzZWQsIHdoaWNoIGlzIHVzdWFsbHkgYH4vTGlicmFyeS9EZXZlbG9wZXIvQ29yZVNpbXVsYXRvci9EZXZpY2VzYFxuICAgKi9cbiAgZ2V0IGRldmljZXNTZXRQYXRoICgpIHtcbiAgICByZXR1cm4gdGhpcy5zaW1jdGwuZGV2aWNlc1NldFBhdGg7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBmdWxsIHBhdGggdG8gdGhlIGRldmljZXMgc2V0LiBJdCBpcyByZWNvbW1lbmRlZCB0byBzZXQgdGhpcyB2YWx1ZVxuICAgKiBvbmNlIHJpZ2h0IGFmdGVyIFNpbXVsYXRvciBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCB0byBub3QgY2hhbmdlIGl0IGR1cmluZ1xuICAgKiB0aGUgaW5zdGFuY2UgbGlmZWN5Y2xlXG4gICAqXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gdmFsdWUgVGhlIGZ1bGwgcGF0aCB0byB0aGUgZGV2aWNlcyBzZXQgcm9vdCBvbiB0aGVcbiAgICogbG9jYWwgZmlsZSBzeXN0ZW1cbiAgICovXG4gIHNldCBkZXZpY2VzU2V0UGF0aCAodmFsdWUpIHtcbiAgICB0aGlzLnNpbWN0bC5kZXZpY2VzU2V0UGF0aCA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgY3VycmVudCBwcm9jZXNzIGlkIG9mIHRoZSBVSSBjbGllbnRcbiAgICpcbiAgICogQHJldHVybiB7P3N0cmluZ30gVGhlIHByb2Nlc3MgSUQgb3IgbnVsbCBpZiB0aGUgVUkgY2xpZW50IGlzIG5vdCBydW5uaW5nXG4gICAqL1xuICBhc3luYyBnZXRVSUNsaWVudFBpZCAoKSB7XG4gICAgbGV0IHN0ZG91dDtcbiAgICB0cnkge1xuICAgICAgKHtzdGRvdXR9ID0gYXdhaXQgZXhlYygncGdyZXAnLCBbJy1mbicsIGAke1NJTVVMQVRPUl9BUFBfTkFNRX0vQ29udGVudHMvTWFjT1MvYF0pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzTmFOKHBhcnNlSW50KHN0ZG91dCwgMTApKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0ZG91dCA9IHN0ZG91dC50cmltKCk7XG4gICAgbG9nLmRlYnVnKGBHb3QgU2ltdWxhdG9yIFVJIGNsaWVudCBQSUQ6ICR7c3Rkb3V0fWApO1xuICAgIHJldHVybiBzdGRvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIHN0YXRlIG9mIFNpbXVsYXRvciBVSSBjbGllbnQuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgb2YgaWYgVUkgY2xpZW50IGlzIHJ1bm5pbmcgb3IgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgYXN5bmMgaXNVSUNsaWVudFJ1bm5pbmcgKCkge1xuICAgIHJldHVybiAhXy5pc051bGwoYXdhaXQgdGhpcy5nZXRVSUNsaWVudFBpZCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBsYXRmb3JtIHZlcnNpb24gb2YgdGhlIGN1cnJlbnQgU2ltdWxhdG9yLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFNESyB2ZXJzaW9uLCBmb3IgZXhhbXBsZSAnOC4zJy5cbiAgICovXG4gIGFzeW5jIGdldFBsYXRmb3JtVmVyc2lvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9wbGF0Zm9ybVZlcnNpb24pIHtcbiAgICAgIGNvbnN0IHtzZGt9ID0gYXdhaXQgdGhpcy5zdGF0KCk7XG4gICAgICB0aGlzLl9wbGF0Zm9ybVZlcnNpb24gPSBzZGs7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wbGF0Zm9ybVZlcnNpb247XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGZ1bGwgcGF0aCB0byB0aGUgZGlyZWN0b3J5IHdoZXJlIFNpbXVsYXRvciBzdHVmZiBpcyBsb2NhdGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBwYXRoIHN0cmluZy5cbiAgICovXG4gIGdldFJvb3REaXIgKCkge1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSwgJ0xpYnJhcnknLCAnRGV2ZWxvcGVyJywgJ0NvcmVTaW11bGF0b3InLCAnRGV2aWNlcycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBmdWxsIHBhdGggdG8gdGhlIGRpcmVjdG9yeSB3aGVyZSBTaW11bGF0b3IgYXBwbGljYXRpb25zIGRhdGEgaXMgbG9jYXRlZC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcGF0aCBzdHJpbmcuXG4gICAqL1xuICBnZXREaXIgKCkge1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUodGhpcy5nZXRSb290RGlyKCksIHRoaXMudWRpZCwgJ2RhdGEnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgZnVsbCBwYXRoIHRvIHRoZSBkaXJlY3Rvcnkgd2hlcmUgU2ltdWxhdG9yIGxvZ3MgYXJlIHN0b3JlZC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcGF0aCBzdHJpbmcuXG4gICAqL1xuICBnZXRMb2dEaXIgKCkge1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSwgJ0xpYnJhcnknLCAnTG9ncycsICdDb3JlU2ltdWxhdG9yJywgdGhpcy51ZGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0YXRlIGFuZCBzcGVjaWZpY3Mgb2YgdGhpcyBzaW0uXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gU2ltdWxhdG9yIHN0YXRzIG1hcHBpbmcsIGZvciBleGFtcGxlOlxuICAgKiB7IG5hbWU6ICdpUGhvbmUgNHMnLFxuICAgKiAgIHVkaWQ6ICdDMDlCMzRFNS03RENCLTQ0MkUtQjc5Qy1BQjZCQzAzNTc0MTcnLFxuICAgKiAgIHN0YXRlOiAnU2h1dGRvd24nLFxuICAgKiAgIHNkazogJzguMydcbiAgICogfVxuICAgKi9cbiAgYXN5bmMgc3RhdCAoKSB7XG4gICAgZm9yIChjb25zdCBbc2RrLCBkZXZpY2VBcnJdIG9mIF8udG9QYWlycyhhd2FpdCB0aGlzLnNpbWN0bC5nZXREZXZpY2VzKCkpKSB7XG4gICAgICBmb3IgKGxldCBkZXZpY2Ugb2YgZGV2aWNlQXJyKSB7XG4gICAgICAgIGlmIChkZXZpY2UudWRpZCA9PT0gdGhpcy51ZGlkKSB7XG4gICAgICAgICAgZGV2aWNlLnNkayA9IHNkaztcbiAgICAgICAgICByZXR1cm4gZGV2aWNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBTaW11bGF0b3IgaGFzIGJlZW4gYm9vdGVkIGF0IGxlYXN0IG9uY2VcbiAgICogYW5kIGhhcyBub3QgYmVlbiBlcmFzZWQgYmVmb3JlXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGN1cnJlbnQgU2ltdWxhdG9yIGhhcyBuZXZlciBiZWVuIHN0YXJ0ZWQgYmVmb3JlXG4gICAqL1xuICBhc3luYyBpc0ZyZXNoICgpIHtcbiAgICBjb25zdCBjYWNoZXNSb290ID0gcGF0aC5yZXNvbHZlKHRoaXMuZ2V0RGlyKCksICdMaWJyYXJ5JywgJ0NhY2hlcycpO1xuICAgIHJldHVybiAoYXdhaXQgZnMuZXhpc3RzKGNhY2hlc1Jvb3QpKVxuICAgICAgPyAoYXdhaXQgZnMuZ2xvYignKicsIHtjd2Q6IGNhY2hlc1Jvb3QsIG5vc29ydDogdHJ1ZSwgc3RyaWN0OiBmYWxzZX0pKS5sZW5ndGggPT09IDBcbiAgICAgIDogdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IFNpbXVsYXRvci4gT25lIHNob3VsZCBkaXN0aW5ndWlzaCB0aGVcbiAgICogc3RhdGVzIG9mIFNpbXVsYXRvciBVSSBhbmQgdGhlIFNpbXVsYXRvciBpdHNlbGYuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGN1cnJlbnQgU2ltdWxhdG9yIGlzIHJ1bm5pbmcuXG4gICAqL1xuICBhc3luYyBpc1J1bm5pbmcgKCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnNpbWN0bC5nZXRFbnYoJ2R1bW15Jyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2ltdWxhdG9yIGlzIGluIHNodXRkb3duIHN0YXRlLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBuZWNlc3NhcnksIGJlY2F1c2UgU2ltdWxhdG9yIG1pZ2h0IGFsc28gYmVcbiAgICogaW4gdGhlIHRyYW5zaXRpb25hbCBTaHV0dGluZyBEb3duIHN0YXRlIHJpZ2h0IGFmdGVyIHRoZSBgc2h1dGRvd25gXG4gICAqIGNvbW1hbmQgaGFzIGJlZW4gaXNzdWVkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBjdXJyZW50IFNpbXVsYXRvciBpcyBzaHV0IGRvd24uXG4gICAqL1xuICBhc3luYyBpc1NodXRkb3duICgpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5zaW1jdGwuZ2V0RW52KCdkdW1teScpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBfLmluY2x1ZGVzKGUuc3RkZXJyLCAnQ3VycmVudCBzdGF0ZTogU2h1dGRvd24nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHR5cGVkZWYge09iamVjdH0gU2ltdWxhdG9yT3B0aW9uc1xuICAgKiBAcHJvcGVydHkgez9zdHJpbmd9IHNjYWxlRmFjdG9yIFtudWxsXSAtIERlZmluZXMgdGhlIHdpbmRvdyBzY2FsZSB2YWx1ZSBmb3IgdGhlIFVJIGNsaWVudCB3aW5kb3cgZm9yIHRoZSBjdXJyZW50IFNpbXVsYXRvci5cbiAgICogICBFcXVhbHMgdG8gbnVsbCBieSBkZWZhdWx0LCB3aGljaCBrZWVwcyB0aGUgY3VycmVudCBzY2FsZSB1bmNoYW5nZWQuXG4gICAqICAgSXQgc2hvdWxkIGJlIG9uZSBvZiBbJzEuMCcsICcwLjc1JywgJzAuNScsICcwLjMzJywgJzAuMjUnXS5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN0YXJ0dXBUaW1lb3V0IFs2MDAwMF0gLSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdW50aWwgU2ltdWxhdG9yIGJvb3RpbmdcbiAgICogICBwcm9jZXNzIGlzIGNvbXBsZXRlZC4gVGhlIGRlZmF1bHQgdGltZW91dCB3aWxsIGJlIHVzZWQgaWYgbm90IHNldCBleHBsaWNpdGx5LlxuICAgKi9cblxuICAvKipcbiAgICogU3RhcnQgdGhlIFNpbXVsYXRvciBVSSBjbGllbnQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAqIEBwYXJhbSB7U2ltdWxhdG9yT3B0aW9uc30gb3B0cyAtIFNpbXVsYXRvciBzdGFydHVwIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIHN0YXJ0VUlDbGllbnQgKG9wdHMgPSB7fSkge1xuICAgIG9wdHMgPSBfLmNsb25lRGVlcChvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcChvcHRzLCB7XG4gICAgICBzY2FsZUZhY3RvcjogbnVsbCxcbiAgICAgIHN0YXJ0dXBUaW1lb3V0OiB0aGlzLnN0YXJ0dXBUaW1lb3V0LFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2ltdWxhdG9yQXBwID0gcGF0aC5yZXNvbHZlKGF3YWl0IGdldFhjb2RlUGF0aCgpLCAnQXBwbGljYXRpb25zJywgU0lNVUxBVE9SX0FQUF9OQU1FKTtcbiAgICBjb25zdCBhcmdzID0gW1xuICAgICAgJy1GbicsIHNpbXVsYXRvckFwcCxcbiAgICAgICctLWFyZ3MnLCAnLUN1cnJlbnREZXZpY2VVRElEJywgdGhpcy51ZGlkLFxuICAgIF07XG5cbiAgICBpZiAob3B0cy5zY2FsZUZhY3Rvcikge1xuICAgICAgY29uc3Qge25hbWV9ID0gYXdhaXQgdGhpcy5zdGF0KCk7XG4gICAgICBjb25zdCBmb3JtYXR0ZWREZXZpY2VOYW1lID0gbmFtZS5yZXBsYWNlKC9cXHMrL2csICctJyk7XG4gICAgICBjb25zdCBhcmd1bWVudE5hbWUgPSBgLVNpbXVsYXRvcldpbmRvd0xhc3RTY2FsZS1jb20uYXBwbGUuQ29yZVNpbXVsYXRvci5TaW1EZXZpY2VUeXBlLiR7Zm9ybWF0dGVkRGV2aWNlTmFtZX1gO1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50TmFtZSwgb3B0cy5zY2FsZUZhY3Rvcik7XG4gICAgfVxuXG4gICAgbG9nLmluZm8oYFN0YXJ0aW5nIFNpbXVsYXRvciBVSSB3aXRoIGNvbW1hbmQ6IG9wZW4gJHthcmdzLmpvaW4oJyAnKX1gKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZXhlYygnb3BlbicsIGFyZ3MsIHt0aW1lb3V0OiBvcHRzLnN0YXJ0dXBUaW1lb3V0fSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoIShlcnIuc3Rkb3V0IHx8ICcnKS5pbmNsdWRlcygnLTEwODI1JykgJiYgIShlcnIuc3RkZXJyIHx8ICcnKS5pbmNsdWRlcygnLTEwODI1JykpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICAgbG9nLndhcm4oYEVycm9yIHdoaWxlIG9wZW5pbmcgVUk6ICR7ZXJyLnN0ZG91dCB8fCBlcnIuc3RkZXJyfS4gQ29udGludWluZ2ApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBnaXZlbiBTaW11bGF0b3Igd2l0aCBvcHRpb25zLiBUaGUgU2ltdWxhdG9yIHdpbGwgbm90IGJlIHJlc3RhcnRlZCBpZlxuICAgKiBpdCBpcyBhbHJlYWR5IHJ1bm5pbmcuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gT25lIG9yIG1vcmUgb2YgYXZhaWxhYmxlIFNpbXVsYXRvciBvcHRpb25zLlxuICAgKiAgIFNlZSB7I3N0YXJ0VUlDbGllbnQob3B0cyl9IGRvY3VtZW50YXRpb24gZm9yIG1vcmUgZGV0YWlscyBvbiBvdGhlciBzdXBwb3J0ZWQga2V5cy5cbiAgICovXG4gIGFzeW5jIHJ1biAob3B0cyA9IHt9KSB7XG4gICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgc3RhcnR1cFRpbWVvdXQ6IHRoaXMuc3RhcnR1cFRpbWVvdXQsXG4gICAgfSwgb3B0cyk7XG4gICAgY29uc3QgaXNTZXJ2ZXJSdW5uaW5nID0gYXdhaXQgdGhpcy5pc1J1bm5pbmcoKTtcbiAgICBjb25zdCBpc1VJQ2xpZW50UnVubmluZyA9IGF3YWl0IHRoaXMuaXNVSUNsaWVudFJ1bm5pbmcoKTtcbiAgICBpZiAoaXNTZXJ2ZXJSdW5uaW5nICYmIGlzVUlDbGllbnRSdW5uaW5nKSB7XG4gICAgICBsb2cuaW5mbyhgQm90aCBTaW11bGF0b3Igd2l0aCBVRElEICR7dGhpcy51ZGlkfSBhbmQgdGhlIFVJIGNsaWVudCBhcmUgY3VycmVudGx5IHJ1bm5pbmdgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5zaHV0ZG93bigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oYEVycm9yIG9uIFNpbXVsYXRvciBzaHV0ZG93bjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5zdGFydFVJQ2xpZW50KG9wdHMpO1xuXG4gICAgYXdhaXQgdGhpcy53YWl0Rm9yQm9vdChvcHRzLnN0YXJ0dXBUaW1lb3V0KTtcbiAgICBsb2cuaW5mbyhgU2ltdWxhdG9yIHdpdGggVURJRCAke3RoaXMudWRpZH0gYm9vdGVkIGluICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc1NlY29uZHMudG9GaXhlZCgzKX1zYCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIGN1cnJlbnQgU2ltdWxhdG9yIHRvIHRoZSBjbGVhbiBzdGF0ZS5cbiAgICogSXQgaXMgZXhwZWN0ZWQgdGhlIHNpbXVsYXRvciBpcyBpbiBzaHV0ZG93biBzdGF0ZSB3aGVuIHRoaXMgQVBJIGlzIGNhbGxlZC5cbiAgICovXG4gIGFzeW5jIGNsZWFuICgpIHtcbiAgICBsb2cuaW5mbyhgQ2xlYW5pbmcgc2ltdWxhdG9yICR7dGhpcy51ZGlkfWApO1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLmVyYXNlRGV2aWNlKDEwMDAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBTaHV0ZG93bk9wdGlvbnNcbiAgICogQHByb3BlcnR5IHs/bnVtYmVyfHN0cmluZ30gdGltZW91dCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsXG4gICAqIFNpbXVsYXRvciBpcyBzaHV0IGRvd24gY29tcGxldGVseS4gTm8gd2FpdCBoYXBwZW5zIGlmIHRoZSB0aW1lb3V0IHZhbHVlIGlzIG5vdCBzZXRcbiAgICovXG5cbiAgLyoqXG4gICAqIFNodXQgZG93biB0aGUgY3VycmVudCBTaW11bGF0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7P1NodXRkb3duT3B0aW9uc30gb3B0c1xuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgU2ltdWxhdG9yIGZhaWxzIHRvIHRyYW5zaXRpb24gaW50byBTaHV0ZG93biBzdGF0ZSBhZnRlclxuICAgKiB0aGUgZ2l2ZW4gdGltZW91dFxuICAgKi9cbiAgYXN5bmMgc2h1dGRvd24gKG9wdHMgPSB7fSkge1xuICAgIGlmIChhd2FpdCB0aGlzLmlzU2h1dGRvd24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwoNSwgNTAwLCB0aGlzLnNpbWN0bC5zaHV0ZG93bkRldmljZS5iaW5kKHRoaXMuc2ltY3RsKSk7XG4gICAgY29uc3Qgd2FpdE1zID0gcGFyc2VJbnQob3B0cy50aW1lb3V0LCAxMCk7XG4gICAgaWYgKHdhaXRNcyA+IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5pc1NodXRkb3duKCksIHtcbiAgICAgICAgICB3YWl0TXMsXG4gICAgICAgICAgaW50ZXJ2YWxNczogMTAwLFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNpbXVsYXRvciBpcyBub3QgaW4gJ1NodXRkb3duJyBzdGF0ZSBhZnRlciAke3dhaXRNc31tc2ApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdGhlIHBhcnRpY3VsYXIgU2ltdWxhdG9yIGZyb20gZGV2aWNlcyBsaXN0XG4gICAqL1xuICBhc3luYyBkZWxldGUgKCkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLmRlbGV0ZURldmljZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyBTaW11bGF0b3Igd2luZG93LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7P3N0cmluZ30gSWYgdGhlIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIHRoZW4gaXQgc2hvdWxkIGJlIGEgdmFsaWQgQXBwbGUgU2NyaXB0IHdoaWNoXG4gICAqIGlzIGFwcGVuZGVkIGJlZm9yZSBlYWNoIFVJIGNsaWVudCBjb21tYW5kIGlzIGV4ZWN1dGVkLiBPdGhlcndpc2UgdGhlIG1ldGhvZCBzaG91bGQgYWN0aXZhdGUgdGhlIHdpbmRvd1xuICAgKiBpdHNlbGYgYW5kIHJldHVybiBub3RoaW5nLlxuICAgKi9cbiAgYXN5bmMgX2FjdGl2YXRlV2luZG93ICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgY29uc3QgcGlkID0gYXdhaXQgdGhpcy5nZXRVSUNsaWVudFBpZCgpO1xuICAgIGlmIChwaWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBhY3RpdmF0ZUFwcChwaWQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZGVidWcoZS5zdGRlcnIgfHwgZS5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGBcbiAgICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgICAgdGVsbCBwcm9jZXNzIFwiU2ltdWxhdG9yXCJcbiAgICAgICAgICBzZXQgZnJvbnRtb3N0IHRvIGZhbHNlXG4gICAgICAgICAgc2V0IGZyb250bW9zdCB0byB0cnVlXG4gICAgICAgIGVuZCB0ZWxsXG4gICAgICBlbmQgdGVsbFxuICAgIGA7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBnaXZlbiBBcHBsZSBTY3JpcHQgaW5zaWRlIGEgY3JpdGljYWwgc2VjdGlvbiwgc28gb3RoZXJcbiAgICogc2Vzc2lvbnMgY2Fubm90IGluZmx1ZW5jZSB0aGUgVUkgY2xpZW50IGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBsZVNjcmlwdCAtIFRoZSB2YWxpZCBBcHBsZSBTY3JpcHQgc25pcHBldCB0byBiZSBleGVjdXRlZC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3Rkb3V0IG91dHB1dCBwcm9kdWNlZCBieSB0aGUgc2NyaXB0LlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgb3Nhc2NyaXB0IHRvb2wgcmV0dXJucyBub24temVybyBleGl0IGNvZGUuXG4gICAqL1xuICBhc3luYyBleGVjdXRlVUlDbGllbnRTY3JpcHQgKGFwcGxlU2NyaXB0KSB7XG4gICAgY29uc3Qgd2luZG93QWN0aXZhdGlvblNjcmlwdCA9IGF3YWl0IHRoaXMuX2FjdGl2YXRlV2luZG93KCk7XG4gICAgY29uc3QgcmVzdWx0U2NyaXB0ID0gYCR7d2luZG93QWN0aXZhdGlvblNjcmlwdCA/IHdpbmRvd0FjdGl2YXRpb25TY3JpcHQgKyAnXFxuJyA6ICcnfSR7YXBwbGVTY3JpcHR9YDtcbiAgICBsb2cuZGVidWcoYEV4ZWN1dGluZyBVSSBBcHBsZSBTY3JpcHQgb24gU2ltdWxhdG9yIHdpdGggVURJRCAke3RoaXMudWRpZH06ICR7cmVzdWx0U2NyaXB0fWApO1xuICAgIHJldHVybiBhd2FpdCBVSV9DTElFTlRfQUNDRVNTX0dVQVJELmFjcXVpcmUoU0lNVUxBVE9SX0FQUF9OQU1FLCBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ29zYXNjcmlwdCcsIFsnLWUnLCByZXN1bHRTY3JpcHRdKTtcbiAgICAgICAgcmV0dXJuIHN0ZG91dDtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhcbiAgICAgICAgICBgQ291bGQgbm90IGNvbXBsZXRlIG9wZXJhdGlvbi4gTWFrZSBzdXJlIFNpbXVsYXRvciBVSSBpcyBydW5uaW5nIGFuZCB0aGUgcGFyZW50IEFwcGl1bSBhcHBsaWNhdGlvbiAoZS4gZy4gQXBwaXVtLmFwcCBvciBUZXJtaW5hbC5hcHApIGAgK1xuICAgICAgICAgIGBpcyBwcmVzZW50IGluIFN5c3RlbSBQcmVmZXJlbmNlcyA+IFNlY3VyaXR5ICYgUHJpdmFjeSA+IFByaXZhY3kgPiBBY2Nlc3NpYmlsaXR5IGxpc3QuIElmIHRoZSBvcGVyYXRpb24gaXMgc3RpbGwgdW5zdWNjZXNzZnVsIHRoZW4gYCArXG4gICAgICAgICAgYGl0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBTaW11bGF0b3IuIE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBQcm9jZXNzSW5mb1xuICAgKiBAcHJvcGVydHkge251bWJlcn0gcGlkIFRoZSBhY3R1YWwgcHJvY2VzcyBpZGVudGlmaWVyLlxuICAgKiBDb3VsZCBiZSB6ZXJvIGlmIHRoZSBwcm9jZXNzIGlzIHRoZSBzeXN0ZW0gb25lLlxuICAgKiBAcHJvcGVydHkgez9zdHJpbmd9IGdyb3VwIFRoZSBwcm9jZXNzIGdyb3VwIGlkZW50aWZpZXIuXG4gICAqIFRoaXMgY291bGQgYmUgYG51bGxgIGlmIHRoZSBwcm9jZXNzIGlzIG5vdCBhIHBhcnQgb2YgdGhlXG4gICAqIHBhcnRpY3VsYXIgZ3JvdXAuIEZvciBgbm9ybWFsYCBhcHBsaWNhdGlvbiBwcm9jZXNzZXMgdGhlIGdyb3VwXG4gICAqIG5hbWUgdXN1YWxseSBlcXVhbHMgdG8gYFVJS2l0QXBwbGljYXRpb25gLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSBUaGUgcHJvY2VzcyBuYW1lLCBmb3IgZXhhbXBsZVxuICAgKiBgY29tLmFwcGxlLlByZWZlcmVuY2VzYFxuICAgKi9cblxuICAvKipcbiAgICogTGlzdHMgcHJvY2Vzc2VzIHRoYXQgYXJlIGN1cnJlbnRseSBydW5uaW5nIG9uIHRoZSBnaXZlbiBTaW11bGF0b3IuXG4gICAqIFRoZSBzaW11bGF0b3IgbXVzdCBiZSBpbiBydW5uaW5nIHN0YXRlIGluIG9yZGVyIGZvciB0aGlzXG4gICAqIG1ldGhvZCB0byB3b3JrIHByb3Blcmx5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheTxQcm9jZXNzSW5mbz59IFRoZSBsaXN0IG9mIHJldHJpZXZlZCBwcm9jZXNzXG4gICAqIGluZm9ybWF0aW9uXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBwcm9jZXNzIGluZm9ybWF0aW9uIGNvdWxkIGJlIHJldHJpZXZlZC5cbiAgICovXG4gIGFzeW5jIHBzICgpIHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbXG4gICAgICAnbGF1bmNoY3RsJyxcbiAgICAgICdwcmludCcsXG4gICAgICAnc3lzdGVtJyxcbiAgICBdKTtcblxuICAgIGNvbnN0IHNlcnZpY2VzTWF0Y2ggPSAvXlxccypzZXJ2aWNlc1xccyo9XFxzKnsoW159XSspL20uZXhlYyhzdGRvdXQpO1xuICAgIGlmICghc2VydmljZXNNYXRjaCkge1xuICAgICAgbG9nLmRlYnVnKHN0ZG91dCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBsaXN0IG9mIGFjdGl2ZSBwcm9jZXNzZXMgY2Fubm90IGJlIHJldHJpZXZlZGApO1xuICAgIH1cbiAgICAvKlxuICAgIEV4YW1wbGUgbWF0Y2g6XG4gICAgICAgIDAgICAgIDc4IFx0Y29tLmFwcGxlLnJlc291cmNlZ3JhYmJlcmRcbiAgICA4MjE1OCAgICAgIC0gXHRjb20uYXBwbGUuYXNzaXN0YW50X3NlcnZpY2VcbiAgICA4MjEyMCAgICAgIC0gXHRjb20uYXBwbGUubmFub3JlZ2lzdHJ5ZFxuICAgIDgyMDg3ICAgICAgLSBcdGNvbS5hcHBsZS5ub3RpZnlkXG4gICAgODIyNjQgICAgICAtIFx0VUlLaXRBcHBsaWNhdGlvbjpjb20uYXBwbGUuUHJlZmVyZW5jZXNbNzA0Yl1bcmItbGVnYWN5XVxuICAgICovXG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgcGF0dGVybiA9IC9eXFxzKihcXGQrKVxccytbXFxkLV0rXFxzKyhbXFx3XFwtLl0rOik/KFtcXHdcXC0uXSspL2dtO1xuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHNlcnZpY2VzTWF0Y2hbMV0pKSkge1xuICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICBwaWQ6IHBhcnNlSW50KG1hdGNoWzFdLCAxMCksXG4gICAgICAgIGdyb3VwOiBfLnRyaW1FbmQobWF0Y2hbMl0sICc6JykgfHwgbnVsbCxcbiAgICAgICAgbmFtZTogbWF0Y2hbM10sXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZnVsbCBwYXRoIHRvIHRoZSBzaW11bGF0b3IncyBXZWJJbnNwZWN0b3IgVW5peCBEb21haW4gU29ja2V0XG4gICAqICAgb3IgYG51bGxgIGlmIHRoZXJlIGlzIG5vIHNvY2tldC5cbiAgICovXG4gIGFzeW5jIGdldFdlYkluc3BlY3RvclNvY2tldCAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIC8vIHRoZXJlIGlzIG5vIFdlYkluc3BlY3RvciBzb2NrZXQgZm9yIHRoaXMgdmVyc2lvbiBvZiBYY29kZVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIElEQiBpbnN0YW5jZSBzZXR0ZXJcbiAgICpcbiAgICogQHBhcmFtIHtJREJ9IHZhbHVlXG4gICAqL1xuICBzZXQgaWRiICh2YWx1ZSkge1xuICAgIHRoaXMuX2lkYiA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0lEQn0gaWRiIGluc3RhbmNlXG4gICAqL1xuICBnZXQgaWRiICgpIHtcbiAgICByZXR1cm4gdGhpcy5faWRiO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IGtpbGxPcHRzXG4gICAqIEBwcm9wZXJ0eSB7P251bWJlcnxzdHJpbmd9IHBpZCAtIFByb2Nlc3MgaWQgb2YgdGhlIFVJIFNpbXVsYXRvciB3aW5kb3dcbiAgICogQHByb3BlcnR5IHtudW1iZXJ8c3RyaW5nfSBzaWduYWwgWzJdIC0gVGhlIHNpZ25hbCBudW1iZXIgdG8gc2VuZCB0byB0aGVcbiAgICogYGtpbGxgIGNvbW1hbmRcbiAgICovXG5cbiAgLyoqXG4gICAqIEtpbGwgdGhlIFVJIGNsaWVudCBpZiBpdCBpcyBydW5uaW5nLlxuICAgKlxuICAgKiBAcGFyYW0gez9raWxsT3B0c30gb3B0c1xuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBVSSBjbGllbnQgd2FzIHN1Y2Nlc3NmdWxseSBraWxsZWQgb3IgZmFsc2VcbiAgICogICAgICAgICAgICAgICAgICAgaWYgaXQgaXMgbm90IHJ1bm5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzZW5kaW5nIHRoZSBzaWduYWwgdG8gdGhlIGNsaWVudCBwcm9jZXNzIGZhaWxzXG4gICAqL1xuICBhc3luYyBraWxsVUlDbGllbnQgKG9wdHMgPSB7fSkge1xuICAgIGxldCB7XG4gICAgICBwaWQsXG4gICAgICBzaWduYWwgPSAyLFxuICAgIH0gPSBvcHRzO1xuICAgIHBpZCA9IHBpZCB8fCBhd2FpdCB0aGlzLmdldFVJQ2xpZW50UGlkKCk7XG4gICAgaWYgKCFwaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsb2cuZGVidWcoYFNlbmRpbmcgJHtzaWduYWx9IGtpbGwgc2lnbmFsIHRvIFNpbXVsYXRvciBVSSBjbGllbnQgd2l0aCBQSUQgJHtwaWR9YCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGV4ZWMoJ2tpbGwnLCBbYC0ke3NpZ25hbH1gLCBwaWRdKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLmNvZGUgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qga2lsbCB0aGUgU2ltdWxhdG9yIFVJIGNsaWVudC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYXggbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIFNpbXVsYXRvciBib290aW5nIGlzIGNvbXBsZXRlZC5cbiAgICovXG4gIGdldCBzdGFydHVwVGltZW91dCAoKSB7XG4gICAgcmV0dXJuIFNUQVJUVVBfVElNRU9VVF9NUztcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgd2hldGhlciB0aGUgU2ltdWxhdG9yIGJvb3RpbmcgaXMgY29tcGxldGVkIGFuZC9vciB3YWl0IGZvciBpdFxuICAgKiB1bnRpbCB0aGUgdGltZW91dCBleHBpcmVzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnR1cFRpbWVvdXQgLSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIGJvb3RpbmcgaXMgY29tcGxldGVkLlxuICAgKiBAZW1pdHMgQk9PVF9DT01QTEVURURfRVZFTlQgaWYgdGhlIGN1cnJlbnQgU2ltdWxhdG9yIGlzIHJlYWR5IHRvIGFjY2VwdCBzaW1jdGwgY29tbWFuZHMsIGxpa2UgJ2luc3RhbGwnLlxuICAgKi9cbiAgYXN5bmMgd2FpdEZvckJvb3QgKHN0YXJ0dXBUaW1lb3V0KSB7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwuc3RhcnRCb290TW9uaXRvcih7dGltZW91dDogc3RhcnR1cFRpbWVvdXR9KTtcbiAgICB0aGlzLmVtaXQoQk9PVF9DT01QTEVURURfRVZFTlQpO1xuICB9XG59XG5cbmZvciAoY29uc3QgW2NtZCwgZm5dIG9mIF8udG9QYWlycyhleHRlbnNpb25zKSkge1xuICBTaW11bGF0b3JYY29kZTgucHJvdG90eXBlW2NtZF0gPSBmbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2ltdWxhdG9yWGNvZGU4O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLFFBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLFVBQUEsR0FBQVIsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFRLFNBQUEsR0FBQVIsT0FBQTtBQUNBLElBQUFTLE9BQUEsR0FBQVQsT0FBQTtBQUNBLElBQUFVLFdBQUEsR0FBQVgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFXLE1BQUEsR0FBQVosc0JBQUEsQ0FBQUMsT0FBQTtBQVVBLE1BQU1ZLG9CQUFvQixHQUFHLGVBQWU7QUFFNUMsTUFBTUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHLElBQUk7QUFDckMsTUFBTUMsc0JBQXNCLEdBQUcsSUFBSUMsa0JBQVMsQ0FBQyxDQUFDO0FBQzlDLE1BQU1DLG1CQUFtQixHQUFHLDJCQUEyQjtBQUd2RCxNQUFNQyxlQUFlLFNBQVNDLG9CQUFZLENBQUM7RUFPekNDLFdBQVdBLENBQUVDLElBQUksRUFBRUMsWUFBWSxFQUFFO0lBQy9CLEtBQUssQ0FBQ0QsSUFBSSxFQUFFQyxZQUFZLENBQUM7SUFFekIsSUFBSSxDQUFDRCxJQUFJLEdBQUdFLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDO0lBQ3hCLElBQUksQ0FBQ0cs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