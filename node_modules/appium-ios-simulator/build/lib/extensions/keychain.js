"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("../logger"));
var _teen_process = require("teen_process");
var _utils = require("../utils");
const extensions = {};
extensions.getLaunchDaemonsRoot = async function getLaunchDaemonsRoot() {
  const devRoot = await (0, _utils.getDeveloperRoot)();
  return _path.default.resolve(devRoot, 'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/LaunchDaemons');
};
extensions.backupKeychains = async function backupKeychains() {
  if (!(await _support.fs.exists(this.keychainPath))) {
    return false;
  }
  const backupPath = await _support.tempDir.path({
    prefix: `keychains_backup_${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`,
    suffix: '.zip'
  });
  const zipArgs = ['-r', backupPath, `${this.keychainPath}${_path.default.sep}`];
  _logger.default.debug(`Creating keychains backup with 'zip ${zipArgs.join(' ')}' command`);
  await (0, _teen_process.exec)('zip', zipArgs);
  if (_lodash.default.isString(this._keychainsBackupPath) && (await _support.fs.exists(this._keychainsBackupPath))) {
    await _support.fs.unlink(this._keychainsBackupPath);
  }
  this._keychainsBackupPath = backupPath;
  return true;
};
extensions.restoreKeychains = async function restoreKeychains(excludePatterns = []) {
  if (!_lodash.default.isString(this._keychainsBackupPath) || !(await _support.fs.exists(this._keychainsBackupPath))) {
    throw new Error(`The keychains backup archive does not exist. ` + `Are you sure it was created before?`);
  }
  if (_lodash.default.isString(excludePatterns)) {
    excludePatterns = excludePatterns.split(',').map(x => x.trim());
  }
  const isServerRunning = await this.isRunning();
  let plistPath;
  if (isServerRunning) {
    plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');
    if (!(await _support.fs.exists(plistPath))) {
      throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
    }
    await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
  }
  try {
    await _support.fs.rimraf(this.keychainPath);
    await (0, _support.mkdirp)(this.keychainPath);
    const unzipArgs = ['-o', this._keychainsBackupPath, ..._lodash.default.flatMap(excludePatterns.map(x => ['-x', x])), '-d', '/'];
    _logger.default.debug(`Restoring keychains with 'unzip ${unzipArgs.join(' ')}' command`);
    await (0, _teen_process.exec)('unzip', unzipArgs);
    await _support.fs.unlink(this._keychainsBackupPath);
    this._keychainsBackupPath = null;
  } finally {
    if (isServerRunning && plistPath) {
      await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
    }
  }
  return true;
};
extensions.clearKeychains = async function clearKeychains() {
  const plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');
  if (!(await _support.fs.exists(plistPath))) {
    throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
  }
  await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
  try {
    if (await _support.fs.exists(this.keychainPath)) {
      await _support.fs.rimraf(this.keychainPath);
      await (0, _support.mkdirp)(this.keychainPath);
    }
  } finally {
    await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
  }
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcGF0aCIsIl9zdXBwb3J0IiwiX2xvZ2dlciIsIl90ZWVuX3Byb2Nlc3MiLCJfdXRpbHMiLCJleHRlbnNpb25zIiwiZ2V0TGF1bmNoRGFlbW9uc1Jvb3QiLCJkZXZSb290IiwiZ2V0RGV2ZWxvcGVyUm9vdCIsInBhdGgiLCJyZXNvbHZlIiwiYmFja3VwS2V5Y2hhaW5zIiwiZnMiLCJleGlzdHMiLCJrZXljaGFpblBhdGgiLCJiYWNrdXBQYXRoIiwidGVtcERpciIsInByZWZpeCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwic3VmZml4IiwiemlwQXJncyIsInNlcCIsImxvZyIsImRlYnVnIiwiam9pbiIsImV4ZWMiLCJfIiwiaXNTdHJpbmciLCJfa2V5Y2hhaW5zQmFja3VwUGF0aCIsInVubGluayIsInJlc3RvcmVLZXljaGFpbnMiLCJleGNsdWRlUGF0dGVybnMiLCJFcnJvciIsInNwbGl0IiwibWFwIiwieCIsInRyaW0iLCJpc1NlcnZlclJ1bm5pbmciLCJpc1J1bm5pbmciLCJwbGlzdFBhdGgiLCJzaW1jdGwiLCJzcGF3blByb2Nlc3MiLCJyaW1yYWYiLCJta2RpcnAiLCJ1bnppcEFyZ3MiLCJmbGF0TWFwIiwiY2xlYXJLZXljaGFpbnMiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2V4dGVuc2lvbnMva2V5Y2hhaW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMsIG1rZGlycCwgdGVtcERpciB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IGdldERldmVsb3BlclJvb3QgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IGV4dGVuc2lvbnMgPSB7fTtcblxuLyoqXG4gKiBSZXNvbHZlIGZ1bGwgcGF0aCB0byBTaW1sYXRvcidzIExhdW5jaERhZW1vbnMgcm9vdCBmb2xkZXJcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGdWxsIHBhdGggdG8gU2ltbGF0b3IncyBMYXVuY2hEYWVtb25zIHJvb3QgZm9sZGVyXG4gKi9cbmV4dGVuc2lvbnMuZ2V0TGF1bmNoRGFlbW9uc1Jvb3QgPSBhc3luYyBmdW5jdGlvbiBnZXRMYXVuY2hEYWVtb25zUm9vdCAoKSB7XG4gIGNvbnN0IGRldlJvb3QgPSBhd2FpdCBnZXREZXZlbG9wZXJSb290KCk7XG4gIHJldHVybiBwYXRoLnJlc29sdmUoXG4gICAgZGV2Um9vdCxcbiAgICAnUGxhdGZvcm1zL2lQaG9uZVNpbXVsYXRvci5wbGF0Zm9ybS9EZXZlbG9wZXIvU0RLcy9pUGhvbmVTaW11bGF0b3Iuc2RrL1N5c3RlbS9MaWJyYXJ5L0xhdW5jaERhZW1vbnMnXG4gICk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgYmFja3VwIG9mIGtleWNoYWlucyBmb2xkZXIuXG4gKiBUaGUgcHJldmlvdXNseSBjcmVhdGVkIGJhY2t1cCB3aWxsIGJlIGF1dG9tYXRpY2FsbHlcbiAqIGRlbGV0ZWQgaWYgdGhpcyBtZXRob2Qgd2FzIGNhbGxlZCB0d2ljZSBpbiBhIHJvdyB3aXRob3V0XG4gKiBgcmVzdG9yZUtleWNoYWluc2AgYmVpbmcgaW52b2tlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYmFja3VwIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bGwuXG4gKi9cbmV4dGVuc2lvbnMuYmFja3VwS2V5Y2hhaW5zID0gYXN5bmMgZnVuY3Rpb24gYmFja3VwS2V5Y2hhaW5zICgpIHtcbiAgaWYgKCFhd2FpdCBmcy5leGlzdHModGhpcy5rZXljaGFpblBhdGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgYmFja3VwUGF0aCA9IGF3YWl0IHRlbXBEaXIucGF0aCh7XG4gICAgcHJlZml4OiBga2V5Y2hhaW5zX2JhY2t1cF8ke01hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSl9YCxcbiAgICBzdWZmaXg6ICcuemlwJyxcbiAgfSk7XG4gIGNvbnN0IHppcEFyZ3MgPSBbXG4gICAgJy1yJywgYmFja3VwUGF0aCxcbiAgICBgJHt0aGlzLmtleWNoYWluUGF0aH0ke3BhdGguc2VwfWBcbiAgXTtcbiAgbG9nLmRlYnVnKGBDcmVhdGluZyBrZXljaGFpbnMgYmFja3VwIHdpdGggJ3ppcCAke3ppcEFyZ3Muam9pbignICcpfScgY29tbWFuZGApO1xuICBhd2FpdCBleGVjKCd6aXAnLCB6aXBBcmdzKTtcbiAgaWYgKF8uaXNTdHJpbmcodGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCkgJiYgYXdhaXQgZnMuZXhpc3RzKHRoaXMuX2tleWNoYWluc0JhY2t1cFBhdGgpKSB7XG4gICAgYXdhaXQgZnMudW5saW5rKHRoaXMuX2tleWNoYWluc0JhY2t1cFBhdGgpO1xuICB9XG4gIHRoaXMuX2tleWNoYWluc0JhY2t1cFBhdGggPSBiYWNrdXBQYXRoO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgcHJldmlzb3VseSBjcmVhdGVkIGtleWNoYWlucyBiYWNrdXAuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfEFycmF5PHN0cmluZz59IGV4Y2x1ZGVQYXR0ZXJucyAtIFRoZSBsaXN0XG4gKiBvZiBmaWxlIG5hbWUgcGF0dGVybnMgdG8gYmUgZXhjbHVkZWQgZnJvbSByZXN0b3JlLiBUaGUgZm9ybWF0XG4gKiBvZiBlYWNoIGl0ZW0gc2hvdWxkIGJlIHRoZSBzYW1lIGFzICcteCcgb3B0aW9uIGZvcm1hdCBmb3JcbiAqICd1bnppcCcgdXRpbGl0eS4gVGhpcyBjYW4gYWxzbyBiZSBhIGNvbW1hLXNlcGFyYXRlZCBzdHJpbmcsXG4gKiB3aGljaCBpcyBnb2luZyBiZSB0cmFuc2Zvcm1lZCBpbnRvIGEgbGlzdCBhdXRvbWF0aWNhbGx5LFxuICogZm9yIGV4YW1wbGU6ICcqLmRiKixibGFibGEuc3FsaXRlJ1xuICogQHJldHVybnMge2Jvb2xlYW59IElmIHRoZSByZXN0b3JlIG9wcmF0aW9uIHdhcyBzdWNjZXNzZnVsLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIG5vIGtleWNoYWlucyBiYWNrdXAgYXZhaWxhYmxlIGZvciByZXN0b3JlLlxuICovXG5leHRlbnNpb25zLnJlc3RvcmVLZXljaGFpbnMgPSBhc3luYyBmdW5jdGlvbiByZXN0b3JlS2V5Y2hhaW5zIChleGNsdWRlUGF0dGVybnMgPSBbXSkge1xuICBpZiAoIV8uaXNTdHJpbmcodGhpcy5fa2V5Y2hhaW5zQmFja3VwUGF0aCkgfHwgIWF3YWl0IGZzLmV4aXN0cyh0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGtleWNoYWlucyBiYWNrdXAgYXJjaGl2ZSBkb2VzIG5vdCBleGlzdC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBBcmUgeW91IHN1cmUgaXQgd2FzIGNyZWF0ZWQgYmVmb3JlP2ApO1xuICB9XG5cbiAgaWYgKF8uaXNTdHJpbmcoZXhjbHVkZVBhdHRlcm5zKSkge1xuICAgIGV4Y2x1ZGVQYXR0ZXJucyA9IGV4Y2x1ZGVQYXR0ZXJucy5zcGxpdCgnLCcpLm1hcCgoeCkgPT4geC50cmltKCkpO1xuICB9XG4gIGNvbnN0IGlzU2VydmVyUnVubmluZyA9IGF3YWl0IHRoaXMuaXNSdW5uaW5nKCk7XG4gIGxldCBwbGlzdFBhdGg7XG4gIGlmIChpc1NlcnZlclJ1bm5pbmcpIHtcbiAgICBwbGlzdFBhdGggPSBwYXRoLnJlc29sdmUoYXdhaXQgdGhpcy5nZXRMYXVuY2hEYWVtb25zUm9vdCgpLCAnY29tLmFwcGxlLnNlY3VyaXR5ZC5wbGlzdCcpO1xuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKHBsaXN0UGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNsZWFyIGtleWNoYWlucyBiZWNhdXNlICcke3BsaXN0UGF0aH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbJ2xhdW5jaGN0bCcsICd1bmxvYWQnLCBwbGlzdFBhdGhdKTtcbiAgfVxuICB0cnkge1xuICAgIGF3YWl0IGZzLnJpbXJhZih0aGlzLmtleWNoYWluUGF0aCk7XG4gICAgYXdhaXQgbWtkaXJwKHRoaXMua2V5Y2hhaW5QYXRoKTtcbiAgICBjb25zdCB1bnppcEFyZ3MgPSBbXG4gICAgICAnLW8nLCB0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoLFxuICAgICAgLi4uKF8uZmxhdE1hcChleGNsdWRlUGF0dGVybnMubWFwKCh4KSA9PiBbJy14JywgeF0pKSksXG4gICAgICAnLWQnLCAnLydcbiAgICBdO1xuICAgIGxvZy5kZWJ1ZyhgUmVzdG9yaW5nIGtleWNoYWlucyB3aXRoICd1bnppcCAke3VuemlwQXJncy5qb2luKCcgJyl9JyBjb21tYW5kYCk7XG4gICAgYXdhaXQgZXhlYygndW56aXAnLCB1bnppcEFyZ3MpO1xuICAgIGF3YWl0IGZzLnVubGluayh0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoKTtcbiAgICB0aGlzLl9rZXljaGFpbnNCYWNrdXBQYXRoID0gbnVsbDtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoaXNTZXJ2ZXJSdW5uaW5nICYmIHBsaXN0UGF0aCkge1xuICAgICAgYXdhaXQgdGhpcy5zaW1jdGwuc3Bhd25Qcm9jZXNzKFsnbGF1bmNoY3RsJywgJ2xvYWQnLCBwbGlzdFBhdGhdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIENsZWFycyBLZXljaGFpbnMgZm9yIHRoZSBwYXJ0aWN1bGFyIHNpbXVsYXRvciBpbiBydW50aW1lICh0aGVyZSBpcyBubyBuZWVkIHRvIHN0b3AgaXQpLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBrZXljaGFpbiBjbGVhbnVwIGhhcyBmYWlsZWQuXG4gKi9cbmV4dGVuc2lvbnMuY2xlYXJLZXljaGFpbnMgPSBhc3luYyBmdW5jdGlvbiBjbGVhcktleWNoYWlucyAoKSB7XG4gIGNvbnN0IHBsaXN0UGF0aCA9IHBhdGgucmVzb2x2ZShhd2FpdCB0aGlzLmdldExhdW5jaERhZW1vbnNSb290KCksICdjb20uYXBwbGUuc2VjdXJpdHlkLnBsaXN0Jyk7XG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKHBsaXN0UGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjbGVhciBrZXljaGFpbnMgYmVjYXVzZSAnJHtwbGlzdFBhdGh9JyBkb2VzIG5vdCBleGlzdGApO1xuICB9XG4gIGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbJ2xhdW5jaGN0bCcsICd1bmxvYWQnLCBwbGlzdFBhdGhdKTtcbiAgdHJ5IHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHRoaXMua2V5Y2hhaW5QYXRoKSkge1xuICAgICAgYXdhaXQgZnMucmltcmFmKHRoaXMua2V5Y2hhaW5QYXRoKTtcbiAgICAgIGF3YWl0IG1rZGlycCh0aGlzLmtleWNoYWluUGF0aCk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IHRoaXMuc2ltY3RsLnNwYXduUHJvY2VzcyhbJ2xhdW5jaGN0bCcsICdsb2FkJywgcGxpc3RQYXRoXSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixP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