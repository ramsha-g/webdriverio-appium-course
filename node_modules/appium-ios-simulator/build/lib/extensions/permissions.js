"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
const STATUS = Object.freeze({
  UNSET: 'unset',
  NO: 'no',
  YES: 'yes',
  LIMITED: 'limited'
});
const WIX_SIM_UTILS = 'applesimutils';
const SERVICES = Object.freeze({
  calendar: 'kTCCServiceCalendar',
  camera: 'kTCCServiceCamera',
  contacts: 'kTCCServiceAddressBook',
  homekit: 'kTCCServiceWillow',
  microphone: 'kTCCServiceMicrophone',
  photos: 'kTCCServicePhotos',
  reminders: 'kTCCServiceReminders',
  medialibrary: 'kTCCServiceMediaLibrary',
  motion: 'kTCCServiceMotion',
  health: 'kTCCServiceMSO',
  siri: 'kTCCServiceSiri',
  speech: 'kTCCServiceSpeechRecognition'
});
function toInternalServiceName(serviceName) {
  if (_lodash.default.has(SERVICES, _lodash.default.toLower(serviceName))) {
    return SERVICES[_lodash.default.toLower(serviceName)];
  }
  throw new Error(`'${serviceName}' is unknown. Only the following service names are supported: ${JSON.stringify(_lodash.default.keys(SERVICES))}`);
}
function formatStatus(status) {
  return [STATUS.UNSET, STATUS.NO].includes(status) ? _lodash.default.toUpper(status) : status;
}
async function execSQLiteQuery(db, query) {
  _logger.default.debug(`Executing SQL query "${query}" on '${db}'`);
  try {
    return (await (0, _teen_process.exec)('sqlite3', ['-line', db, query])).stdout;
  } catch (err) {
    throw new Error(`Cannot execute SQLite query "${query}" to '${db}'. Original error: ${err.stderr}`);
  }
}
async function execWix(args) {
  try {
    await _support.fs.which(WIX_SIM_UTILS);
  } catch (e) {
    throw new Error(`${WIX_SIM_UTILS} binary has not been found in your PATH. ` + `Please install it ('brew tap wix/brew && brew install wix/brew/applesimutils') to ` + `be able to change application permissions`);
  }
  _logger.default.debug(`Executing: ${WIX_SIM_UTILS} ${_support.util.quote(args)}`);
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(WIX_SIM_UTILS, args);
    _logger.default.debug(`Command output: ${stdout}`);
    return stdout;
  } catch (e) {
    throw new Error(`Cannot execute "${WIX_SIM_UTILS} ${_support.util.quote(args)}". Original error: ${e.stderr || e.message}`);
  }
}
async function setAccess(udid, bundleId, permissionsMapping) {
  const permissionsArg = _lodash.default.toPairs(permissionsMapping).map(x => `${x[0]}=${formatStatus(x[1])}`).join(',');
  return await execWix(['--byId', udid, '--bundle', bundleId, '--setPermissions', permissionsArg]);
}
async function getAccess(bundleId, serviceName, simDataRoot) {
  const internalServiceName = toInternalServiceName(serviceName);
  const dbPath = _path.default.resolve(simDataRoot, 'Library', 'TCC', 'TCC.db');
  const getAccessStatus = async (statusPairs, statusKey) => {
    for (const [statusValue, status] of statusPairs) {
      const sql = `SELECT count(*) FROM 'access' ` + `WHERE client='${bundleId}' AND ${statusKey}=${statusValue} AND service='${internalServiceName}'`;
      const count = await execSQLiteQuery(dbPath, sql);
      if (parseInt(count.split('=')[1], 10) > 0) {
        return status;
      }
    }
    return STATUS.UNSET;
  };
  try {
    return await getAccessStatus([['0', STATUS.NO], ['2', STATUS.YES], ['3', STATUS.LIMITED]], 'auth_value');
  } catch {
    return await getAccessStatus([['0', STATUS.NO], ['1', STATUS.YES]], 'allowed');
  }
}
const extensions = {};
extensions.setPermission = async function setPermission(bundleId, permission, value) {
  await this.setPermissions(bundleId, {
    [permission]: value
  });
};
extensions.setPermissions = async function setPermissions(bundleId, permissionsMapping) {
  _logger.default.debug(`Setting access for '${bundleId}': ${JSON.stringify(permissionsMapping, null, 2)}`);
  await setAccess(this.udid, bundleId, permissionsMapping);
};
extensions.getPermission = async function getPermission(bundleId, serviceName) {
  const result = await getAccess(bundleId, serviceName, this.getDir());
  _logger.default.debug(`Got ${serviceName} access status for '${bundleId}': ${result}`);
  return result;
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9nZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9kYXNoIiwiX3N1cHBvcnQiLCJfdGVlbl9wcm9jZXNzIiwiX3BhdGgiLCJTVEFUVVMiLCJPYmplY3QiLCJmcmVlemUiLCJVTlNFVCIsIk5PIiwiWUVTIiwiTElNSVRFRCIsIldJWF9TSU1fVVRJTFMiLCJTRVJWSUNFUyIsImNhbGVuZGFyIiwiY2FtZXJhIiwiY29udGFjdHMiLCJob21la2l0IiwibWljcm9waG9uZSIsInBob3RvcyIsInJlbWluZGVycyIsIm1lZGlhbGlicmFyeSIsIm1vdGlvbiIsImhlYWx0aCIsInNpcmkiLCJzcGVlY2giLCJ0b0ludGVybmFsU2VydmljZU5hbWUiLCJzZXJ2aWNlTmFtZSIsIl8iLCJoYXMiLCJ0b0xvd2VyIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5cyIsImZvcm1hdFN0YXR1cyIsInN0YXR1cyIsImluY2x1ZGVzIiwidG9VcHBlciIsImV4ZWNTUUxpdGVRdWVyeSIsImRiIiwicXVlcnkiLCJsb2ciLCJkZWJ1ZyIsImV4ZWMiLCJzdGRvdXQiLCJlcnIiLCJzdGRlcnIiLCJleGVjV2l4IiwiYXJncyIsImZzIiwid2hpY2giLCJlIiwidXRpbCIsInF1b3RlIiwibWVzc2FnZSIsInNldEFjY2VzcyIsInVkaWQiLCJidW5kbGVJZCIsInBlcm1pc3Npb25zTWFwcGluZyIsInBlcm1pc3Npb25zQXJnIiwidG9QYWlycyIsIm1hcCIsIngiLCJqb2luIiwiZ2V0QWNjZXNzIiwic2ltRGF0YVJvb3QiLCJpbnRlcm5hbFNlcnZpY2VOYW1lIiwiZGJQYXRoIiwicGF0aCIsInJlc29sdmUiLCJnZXRBY2Nlc3NTdGF0dXMiLCJzdGF0dXNQYWlycyIsInN0YXR1c0tleSIsInN0YXR1c1ZhbHVlIiwic3FsIiwiY291bnQiLCJwYXJzZUludCIsInNwbGl0IiwiZXh0ZW5zaW9ucyIsInNldFBlcm1pc3Npb24iLCJwZXJtaXNzaW9uIiwidmFsdWUiLCJzZXRQZXJtaXNzaW9ucyIsImdldFBlcm1pc3Npb24iLCJyZXN1bHQiLCJnZXREaXIiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2V4dGVuc2lvbnMvcGVybWlzc2lvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZzLCB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IFNUQVRVUyA9IE9iamVjdC5mcmVlemUoe1xuICBVTlNFVDogJ3Vuc2V0JyxcbiAgTk86ICdubycsXG4gIFlFUzogJ3llcycsXG4gIExJTUlURUQ6ICdsaW1pdGVkJyxcbn0pO1xuXG5jb25zdCBXSVhfU0lNX1VUSUxTID0gJ2FwcGxlc2ltdXRpbHMnO1xuY29uc3QgU0VSVklDRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgY2FsZW5kYXI6ICdrVENDU2VydmljZUNhbGVuZGFyJyxcbiAgY2FtZXJhOiAna1RDQ1NlcnZpY2VDYW1lcmEnLFxuICBjb250YWN0czogJ2tUQ0NTZXJ2aWNlQWRkcmVzc0Jvb2snLFxuICBob21la2l0OiAna1RDQ1NlcnZpY2VXaWxsb3cnLFxuICBtaWNyb3Bob25lOiAna1RDQ1NlcnZpY2VNaWNyb3Bob25lJyxcbiAgcGhvdG9zOiAna1RDQ1NlcnZpY2VQaG90b3MnLFxuICByZW1pbmRlcnM6ICdrVENDU2VydmljZVJlbWluZGVycycsXG4gIG1lZGlhbGlicmFyeTogJ2tUQ0NTZXJ2aWNlTWVkaWFMaWJyYXJ5JyxcbiAgbW90aW9uOiAna1RDQ1NlcnZpY2VNb3Rpb24nLFxuICBoZWFsdGg6ICdrVENDU2VydmljZU1TTycsXG4gIHNpcmk6ICdrVENDU2VydmljZVNpcmknLFxuICBzcGVlY2g6ICdrVENDU2VydmljZVNwZWVjaFJlY29nbml0aW9uJyxcbn0pO1xuXG5mdW5jdGlvbiB0b0ludGVybmFsU2VydmljZU5hbWUgKHNlcnZpY2VOYW1lKSB7XG4gIGlmIChfLmhhcyhTRVJWSUNFUywgXy50b0xvd2VyKHNlcnZpY2VOYW1lKSkpIHtcbiAgICByZXR1cm4gU0VSVklDRVNbXy50b0xvd2VyKHNlcnZpY2VOYW1lKV07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGAnJHtzZXJ2aWNlTmFtZX0nIGlzIHVua25vd24uIE9ubHkgdGhlIGZvbGxvd2luZyBzZXJ2aWNlIG5hbWVzIGFyZSBzdXBwb3J0ZWQ6ICR7SlNPTi5zdHJpbmdpZnkoXy5rZXlzKFNFUlZJQ0VTKSl9YFxuICApO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRTdGF0dXMgKHN0YXR1cykge1xuICByZXR1cm4gW1NUQVRVUy5VTlNFVCwgU1RBVFVTLk5PXS5pbmNsdWRlcyhzdGF0dXMpID8gXy50b1VwcGVyKHN0YXR1cykgOiBzdGF0dXM7XG59XG5cbi8qKlxuICogUnVucyBhIGNvbW1hbmQgbGluZSBzcWxpdGUzIHF1ZXJ5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRiIC0gRnVsbCBwYXRoIHRvIHNxbGl0ZSBkYXRhYmFzZVxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IC0gVGhlIGFjdHVhbCBxdWVyeSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHNxbGl0ZSBjb21tYW5kIHN0ZG91dFxuICovXG5hc3luYyBmdW5jdGlvbiBleGVjU1FMaXRlUXVlcnkgKGRiLCBxdWVyeSkge1xuICBsb2cuZGVidWcoYEV4ZWN1dGluZyBTUUwgcXVlcnkgXCIke3F1ZXJ5fVwiIG9uICcke2RifSdgKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKGF3YWl0IGV4ZWMoJ3NxbGl0ZTMnLCBbJy1saW5lJywgZGIsIHF1ZXJ5XSkpLnN0ZG91dDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENhbm5vdCBleGVjdXRlIFNRTGl0ZSBxdWVyeSBcIiR7cXVlcnl9XCIgdG8gJyR7ZGJ9Jy4gT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLnN0ZGVycn1gXG4gICAgKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBleGVjV2l4IChhcmdzKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud2hpY2goV0lYX1NJTV9VVElMUyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgJHtXSVhfU0lNX1VUSUxTfSBiaW5hcnkgaGFzIG5vdCBiZWVuIGZvdW5kIGluIHlvdXIgUEFUSC4gYCArXG4gICAgICBgUGxlYXNlIGluc3RhbGwgaXQgKCdicmV3IHRhcCB3aXgvYnJldyAmJiBicmV3IGluc3RhbGwgd2l4L2JyZXcvYXBwbGVzaW11dGlscycpIHRvIGAgK1xuICAgICAgYGJlIGFibGUgdG8gY2hhbmdlIGFwcGxpY2F0aW9uIHBlcm1pc3Npb25zYFxuICAgICk7XG4gIH1cblxuICBsb2cuZGVidWcoYEV4ZWN1dGluZzogJHtXSVhfU0lNX1VUSUxTfSAke3V0aWwucXVvdGUoYXJncyl9YCk7XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKFdJWF9TSU1fVVRJTFMsIGFyZ3MpO1xuICAgIGxvZy5kZWJ1ZyhgQ29tbWFuZCBvdXRwdXQ6ICR7c3Rkb3V0fWApO1xuICAgIHJldHVybiBzdGRvdXQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBleGVjdXRlIFwiJHtXSVhfU0lNX1VUSUxTfSAke3V0aWwucXVvdGUoYXJncyl9XCIuIE9yaWdpbmFsIGVycm9yOiAke2Uuc3RkZXJyIHx8IGUubWVzc2FnZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgcGVybWlzc2lvbnMgZm9yIHRoZSBnaXZlbiBhcHBsaWNhdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIC0gdWRpZCBvZiB0aGUgdGFyZ2V0IHNpbXVsYXRvciBkZXZpY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBidW5kbGUgaWRlbnRpZmllciBvZiB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IHBlcm1pc3Npb25zTWFwcGluZyAtIEFuIG9iamVjdCwgd2hlcmUga2V5cyBhciAgc2VydmljZSBuYW1lc1xuICogYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyBzdGF0ZSB2YWx1ZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2l4L0FwcGxlU2ltdWxhdG9yVXRpbHNcbiAqIGZvciBtb3JlIGRldGFpbHMgb24gYXZhaWxhYmxlIHNlcnZpY2UgbmFtZXMgYW5kIHN0YXR1c2VzLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBjaGFuZ2luZyBwZXJtaXNzaW9ucy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0QWNjZXNzICh1ZGlkLCBidW5kbGVJZCwgcGVybWlzc2lvbnNNYXBwaW5nKSB7XG4gIGNvbnN0IHBlcm1pc3Npb25zQXJnID0gXy50b1BhaXJzKHBlcm1pc3Npb25zTWFwcGluZylcbiAgICAubWFwKCh4KSA9PiBgJHt4WzBdfT0ke2Zvcm1hdFN0YXR1cyh4WzFdKX1gKVxuICAgIC5qb2luKCcsJyk7XG4gIHJldHVybiBhd2FpdCBleGVjV2l4KFtcbiAgICAnLS1ieUlkJywgdWRpZCxcbiAgICAnLS1idW5kbGUnLCBidW5kbGVJZCxcbiAgICAnLS1zZXRQZXJtaXNzaW9ucycsIHBlcm1pc3Npb25zQXJnLFxuICBdKTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGN1cnJlbnQgcGVybWlzc2lvbiBzdGF0dXMgZm9yIHRoZSBnaXZlbiBzZXJ2aWNlIGFuZCBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBidW5kbGUgaWRlbnRpZmllciBvZiB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UuIFNob3VsZCBiZSBvbmUgb2ZcbiAqIGBTRVJWSUNFU2Aga2V5cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzaW1EYXRhUm9vdCAtIHRoZSBwYXRoIHRvIFNpbXVsYXRvciBgZGF0YWAgcm9vdFxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgY3VycmVudCBzdGF0dXM6IHllcy9uby91bnNldC9saW1pdGVkXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIHJldHJpZXZpbmcgcGVybWlzc2lvbnMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEFjY2VzcyAoYnVuZGxlSWQsIHNlcnZpY2VOYW1lLCBzaW1EYXRhUm9vdCkge1xuICBjb25zdCBpbnRlcm5hbFNlcnZpY2VOYW1lID0gdG9JbnRlcm5hbFNlcnZpY2VOYW1lKHNlcnZpY2VOYW1lKTtcbiAgY29uc3QgZGJQYXRoID0gcGF0aC5yZXNvbHZlKHNpbURhdGFSb290LCAnTGlicmFyeScsICdUQ0MnLCAnVENDLmRiJyk7XG4gIGNvbnN0IGdldEFjY2Vzc1N0YXR1cyA9IGFzeW5jIChzdGF0dXNQYWlycywgc3RhdHVzS2V5KSA9PiB7XG4gICAgZm9yIChjb25zdCBbc3RhdHVzVmFsdWUsIHN0YXR1c10gb2Ygc3RhdHVzUGFpcnMpIHtcbiAgICAgIGNvbnN0IHNxbCA9IGBTRUxFQ1QgY291bnQoKikgRlJPTSAnYWNjZXNzJyBgICtcbiAgICAgICAgYFdIRVJFIGNsaWVudD0nJHtidW5kbGVJZH0nIEFORCAke3N0YXR1c0tleX09JHtzdGF0dXNWYWx1ZX0gQU5EIHNlcnZpY2U9JyR7aW50ZXJuYWxTZXJ2aWNlTmFtZX0nYDtcbiAgICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgZXhlY1NRTGl0ZVF1ZXJ5KGRiUGF0aCwgc3FsKTtcbiAgICAgIGlmIChwYXJzZUludChjb3VudC5zcGxpdCgnPScpWzFdLCAxMCkgPiAwKSB7XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTVEFUVVMuVU5TRVQ7XG4gIH07XG5cbiAgLy8gJ2F1dGhfdmFsdWUnIGV4aXN0ZW5jZSBkZXBlbmRzIG9uIHRoZSBPUyB2ZXJzaW9uIHJhdGhlciB0aGFuIFhjb2RlIHZlcnNpb24uXG4gIC8vIFRodXMgaGVyZSBjaGVjayB0aGUgbmV3ZXIgb25lIGZpcnN0LCB0aGVuIGZhbGxiYWNrIHRvIHRoZSBvbGRlciB2ZXJzaW9uIHdheS5cbiAgdHJ5IHtcbiAgICAvLyBpT1MgMTQrXG4gICAgcmV0dXJuIGF3YWl0IGdldEFjY2Vzc1N0YXR1cyhcbiAgICAgIFtbJzAnLCBTVEFUVVMuTk9dLCBbJzInLCBTVEFUVVMuWUVTXSwgWyczJywgU1RBVFVTLkxJTUlURURdXSxcbiAgICAgICdhdXRoX3ZhbHVlJ1xuICAgICk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBhd2FpdCBnZXRBY2Nlc3NTdGF0dXMoXG4gICAgICBbWycwJywgU1RBVFVTLk5PXSwgWycxJywgU1RBVFVTLllFU11dLFxuICAgICAgJ2FsbG93ZWQnXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBleHRlbnNpb25zID0ge307XG5cbi8qKlxuICogU2V0cyB0aGUgcGFydGljdWxhciBwZXJtaXNzaW9uIHRvIHRoZSBhcHBsaWNhdGlvbiBidW5kbGUuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3dpeC9BcHBsZVNpbXVsYXRvclV0aWxzIGZvciBtb3JlIGRldGFpbHMgb25cbiAqIHRoZSBhdmFpbGFibGUgc2VydmljZSBuYW1lcyBhbmQgc3RhdHVzZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gQXBwbGljYXRpb24gYnVuZGxlIGlkZW50aWZpZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGVybWlzc2lvbiAtIFNlcnZpY2UgbmFtZSB0byBiZSBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgZGVzaXJlZCBzdGF0dXMgZm9yIHRoZSBzZXJ2aWNlLlxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBjaGFuZ2luZyBwZXJtaXNzaW9uLlxuICovXG5leHRlbnNpb25zLnNldFBlcm1pc3Npb24gPSBhc3luYyBmdW5jdGlvbiBzZXRQZXJtaXNzaW9uIChidW5kbGVJZCwgcGVybWlzc2lvbiwgdmFsdWUpIHtcbiAgYXdhaXQgdGhpcy5zZXRQZXJtaXNzaW9ucyhidW5kbGVJZCwge1twZXJtaXNzaW9uXTogdmFsdWV9KTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcGVybWlzc2lvbnMgZm9yIHRoZSBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uIGJ1bmRsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgLSBBcHBsaWNhdGlvbiBidW5kbGUgaWRlbnRpZmllci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwZXJtaXNzaW9uc01hcHBpbmcgLSBBIG1hcHBpbmcgd2hlcmUga2F5c1xuICogYXJlIHNlcnZpY2UgbmFtZXMgYW5kIHZhbHVlcyBhcmUgdGhlaXIgY29ycmVzcG9uZGluZyBzdGF0dXMgdmFsdWVzLlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aXgvQXBwbGVTaW11bGF0b3JVdGlsc1xuICogZm9yIG1vcmUgZGV0YWlscyBvbiBhdmFpbGFibGUgc2VydmljZSBuYW1lcyBhbmQgc3RhdHVzZXMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGNoYW5naW5nIHBlcm1pc3Npb25zLlxuICovXG5leHRlbnNpb25zLnNldFBlcm1pc3Npb25zID0gYXN5bmMgZnVuY3Rpb24gc2V0UGVybWlzc2lvbnMgKGJ1bmRsZUlkLCBwZXJtaXNzaW9uc01hcHBpbmcpIHtcbiAgbG9nLmRlYnVnKGBTZXR0aW5nIGFjY2VzcyBmb3IgJyR7YnVuZGxlSWR9JzogJHtKU09OLnN0cmluZ2lmeShwZXJtaXNzaW9uc01hcHBpbmcsIG51bGwsIDIpfWApO1xuICBhd2FpdCBzZXRBY2Nlc3ModGhpcy51ZGlkLCBidW5kbGVJZCwgcGVybWlzc2lvbnNNYXBwaW5nKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmVzIGN1cnJlbnQgcGVybWlzc2lvbiBzdGF0dXMgZm9yIHRoZSBnaXZlbiBhcHBsaWNhdGlvbiBidW5kbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gQXBwbGljYXRpb24gYnVuZGxlIGlkZW50aWZpZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZU5hbWUgLSBPbmUgb2YgYXZhaWxhYmxlIHNlcnZpY2UgbmFtZXMuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIHJldHJpZXZpbmcgcGVybWlzc2lvbnMuXG4gKi9cbmV4dGVuc2lvbnMuZ2V0UGVybWlzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uIGdldFBlcm1pc3Npb24gKGJ1bmRsZUlkLCBzZXJ2aWNlTmFtZSkge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRBY2Nlc3MoYnVuZGxlSWQsIHNlcnZpY2VOYW1lLCB0aGlzLmdldERpcigpKTtcbiAgbG9nLmRlYnVnKGBHb3QgJHtzZXJ2aWNlTmFtZX0gYWNjZXNzIHN0YXR1cyBmb3IgJyR7YnVuZGxlSWR9JzogJHtyZXN1bHR9YCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLE1BQU1LLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUM7RUFDM0JDLEtBQUssRUFBRSxPQUFPO0VBQ2RDLEVBQUUsRUFBRSxJQUFJ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