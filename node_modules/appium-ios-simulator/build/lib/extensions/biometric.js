"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("../logger"));
const extensions = {};
extensions.isBiometricEnrolled = async function isBiometricEnrolled() {
  const output = await this.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
        set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
      end tell
    end tell
  `);
  _logger.default.debug(`Touch ID enrolled state: ${output}`);
  return _lodash.default.isString(output) && output.trim() === 'true';
};
extensions.enrollBiometric = async function enrollBiometric(isEnabled = true) {
  await this.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set dstMenuItem to menu item "Toggle Enrolled State" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
        set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        if ${isEnabled ? 'not ' : ''}isChecked then
          click dstMenuItem
        end if
      end tell
    end tell
  `);
};
extensions.sendBiometricMatch = async function sendBiometricMatch(shouldMatch = true) {
  await this.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set dstMenuItem to menu item "${shouldMatch ? 'Matching Touch' : 'Non-matching Touch'}" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1
        click dstMenuItem
      end tell
    end tell
  `);
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbG9nZ2VyIiwiZXh0ZW5zaW9ucyIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJvdXRwdXQiLCJleGVjdXRlVUlDbGllbnRTY3JpcHQiLCJsb2ciLCJkZWJ1ZyIsIl8iLCJpc1N0cmluZyIsInRyaW0iLCJlbnJvbGxCaW9tZXRyaWMiLCJpc0VuYWJsZWQiLCJzZW5kQmlvbWV0cmljTWF0Y2giLCJzaG91bGRNYXRjaCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZXh0ZW5zaW9ucy9iaW9tZXRyaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBzdGF0ZSBvZiBCaW9tZXRyaWMgRW5yb2xsbWVudCBmZWF0dXJlLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBFaXRoZXIgdHJ1ZSBvciBmYWxzZVxuICogQHRocm93cyB7RXJyb3J9IElmIEVucm9sbG1lbnQgc3RhdGUgY2Fubm90IGJlIGRldGVybWluZWRcbiAqL1xuZXh0ZW5zaW9ucy5pc0Jpb21ldHJpY0Vucm9sbGVkID0gYXN5bmMgZnVuY3Rpb24gaXNCaW9tZXRyaWNFbnJvbGxlZCAoKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlY3V0ZVVJQ2xpZW50U2NyaXB0KGBcbiAgICB0ZWxsIGFwcGxpY2F0aW9uIFwiU3lzdGVtIEV2ZW50c1wiXG4gICAgICB0ZWxsIHByb2Nlc3MgXCJTaW11bGF0b3JcIlxuICAgICAgICBzZXQgZHN0TWVudUl0ZW0gdG8gbWVudSBpdGVtIFwiVG9nZ2xlIEVucm9sbGVkIFN0YXRlXCIgb2YgbWVudSAxIG9mIG1lbnUgaXRlbSBcIlRvdWNoIElEXCIgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJIYXJkd2FyZVwiIG9mIG1lbnUgYmFyIDFcbiAgICAgICAgc2V0IGlzQ2hlY2tlZCB0byAodmFsdWUgb2YgYXR0cmlidXRlIFwiQVhNZW51SXRlbU1hcmtDaGFyXCIgb2YgZHN0TWVudUl0ZW0pIGlzIFwi4pyTXCJcbiAgICAgIGVuZCB0ZWxsXG4gICAgZW5kIHRlbGxcbiAgYCk7XG4gIGxvZy5kZWJ1ZyhgVG91Y2ggSUQgZW5yb2xsZWQgc3RhdGU6ICR7b3V0cHV0fWApO1xuICByZXR1cm4gXy5pc1N0cmluZyhvdXRwdXQpICYmIG91dHB1dC50cmltKCkgPT09ICd0cnVlJztcbn07XG5cbi8qKlxuICogRW5yb2xscyBiaW9tZXRyaWMgKFRvdWNoSWQsIEZhY2VJZCkgZmVhdHVyZSB0ZXN0aW5nIGluIFNpbXVsYXRvciBVSSBjbGllbnQuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBpc0VuYWJsZWQgLSBEZWZpbmVzIHdoZXRoZXIgYmlvbWV0cmljIHN0YXRlIGlzIGVuYWJsZWQvZGlzYWJsZWRcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgZW5yb2xsZWQgc3RhdGUgY2Fubm90IGJlIGNoYW5nZWRcbiAqL1xuZXh0ZW5zaW9ucy5lbnJvbGxCaW9tZXRyaWMgPSBhc3luYyBmdW5jdGlvbiBlbnJvbGxCaW9tZXRyaWMgKGlzRW5hYmxlZCA9IHRydWUpIHtcbiAgYXdhaXQgdGhpcy5leGVjdXRlVUlDbGllbnRTY3JpcHQoYFxuICAgIHRlbGwgYXBwbGljYXRpb24gXCJTeXN0ZW0gRXZlbnRzXCJcbiAgICAgIHRlbGwgcHJvY2VzcyBcIlNpbXVsYXRvclwiXG4gICAgICAgIHNldCBkc3RNZW51SXRlbSB0byBtZW51IGl0ZW0gXCJUb2dnbGUgRW5yb2xsZWQgU3RhdGVcIiBvZiBtZW51IDEgb2YgbWVudSBpdGVtIFwiVG91Y2ggSURcIiBvZiBtZW51IDEgb2YgbWVudSBiYXIgaXRlbSBcIkhhcmR3YXJlXCIgb2YgbWVudSBiYXIgMVxuICAgICAgICBzZXQgaXNDaGVja2VkIHRvICh2YWx1ZSBvZiBhdHRyaWJ1dGUgXCJBWE1lbnVJdGVtTWFya0NoYXJcIiBvZiBkc3RNZW51SXRlbSkgaXMgXCLinJNcIlxuICAgICAgICBpZiAke2lzRW5hYmxlZCA/ICdub3QgJyA6ICcnfWlzQ2hlY2tlZCB0aGVuXG4gICAgICAgICAgY2xpY2sgZHN0TWVudUl0ZW1cbiAgICAgICAgZW5kIGlmXG4gICAgICBlbmQgdGVsbFxuICAgIGVuZCB0ZWxsXG4gIGApO1xufTtcblxuLyoqXG4gKiBTZW5kcyBhIG5vdGlmaWNhdGlvbiB0byBtYXRjaC9ub3QgbWF0Y2ggdGhlIHRvdWNoIGlkLlxuICpcbiAqIEBwYXJhbSB7P2Jvb2xlYW59IHNob3VsZE1hdGNoIFt0cnVlXSAtIFNldCBpdCB0byB0cnVlIG9yIGZhbHNlIGluIG9yZGVyIHRvIGVtdWxhdGVcbiAqIG1hdGNoaW5nL25vdCBtYXRjaGluZyB0aGUgY29ycmVzcG9uZGluZyBiaW9tZXRyaWNcbiAqL1xuZXh0ZW5zaW9ucy5zZW5kQmlvbWV0cmljTWF0Y2ggPSBhc3luYyBmdW5jdGlvbiBzZW5kQmlvbWV0cmljTWF0Y2ggKHNob3VsZE1hdGNoID0gdHJ1ZSkge1xuICBhd2FpdCB0aGlzLmV4ZWN1dGVVSUNsaWVudFNjcmlwdChgXG4gICAgdGVsbCBhcHBsaWNhdGlvbiBcIlN5c3RlbSBFdmVudHNcIlxuICAgICAgdGVsbCBwcm9jZXNzIFwiU2ltdWxhdG9yXCJcbiAgICAgICAgc2V0IGRzdE1lbnVJdGVtIHRvIG1lbnUgaXRlbSBcIiR7c2hvdWxkTWF0Y2ggPyAnTWF0Y2hpbmcgVG91Y2gnIDogJ05vbi1tYXRjaGluZyBUb3VjaCd9XCIgb2YgbWVudSAxIG9mIG1lbnUgaXRlbSBcIlRvdWNoIElEXCIgb2YgbWVudSAxIG9mIG1lbnUgYmFyIGl0ZW0gXCJIYXJkd2FyZVwiIG9mIG1lbnUgYmFyIDFcbiAgICAgICAgY2xpY2sgZHN0TWVudUl0ZW1cbiAgICAgIGVuZCB0ZWxsXG4gICAgZW5kIHRlbGxcbiAgYCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLE1BQU1FLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFRckJBLFVBQVUsQ0FBQ0MsbUJBQW1CLEdBQUcsZUFBZUEsbUJBQW1CQSxDQUFBLEVBQUk7RUFDckUsTUFBTUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxxQkFBcUIsQ0FBRTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLENBQUM7RUFDRkMsZUFBRyxDQUFDQyxLQUFLLENBQUUsNEJBQTJCSCxNQUFPLEVBQUMsQ0FBQztFQUMvQyxPQUFPSSxlQUFDLENBQUNDLFFBQVEsQ0FBQ0wsTUFBTSxDQUFDLElBQUlBLE1BQU0sQ0FBQ00sSUFBSSxDQUFDLENBQUMsS0FBSyxNQUFNO0FBQ3ZELENBQUM7QUFRRFIsVUFBVSxDQUFDUyxlQUFlLEdBQUcsZUFBZUEsZUFBZUEsQ0FBRUMsU0FBUyxHQUFHLElBQUksRUFBRTtFQUM3RSxNQUFNLElBQUksQ0FBQ1AscUJBQXFCLENBQUU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhTyxTQUFTLEdBQUcsTUFBTSxHQUFHLEVBQUc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLENBQUM7QUFDSixDQUFDO0FBUURWLFVBQVUsQ0FBQ1csa0JBQWtCLEdBQUcsZUFBZUEsa0JBQWtCQSxDQUFFQyxXQUFXLEdBQUcsSUFBSSxFQUFFO0VBQ3JGLE1BQU0sSUFBSSxDQUFDVCxxQkFBcUIsQ0FBRTtBQUNwQztBQUNBO0FBQ0Esd0NBQXdDUyxXQUFXLEdBQUcsZ0JBQWdCLEdBQUcsb0JBQXFCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLEdBQUcsQ0FBQztBQUNKLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBRWFiLFVBQVU7QUFBQWMsT0FBQSxDQUFBQyxPQUFBLEdBQUFGLFFBQUEifQ==