"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-14"));
class SimulatorXcode15 extends _simulatorXcode.default {
  async _fetchSystemAppBundleIds() {
    if (this._systemAppBundleIds) {
      return this._systemAppBundleIds;
    }
    const appsRoot = _path.default.resolve(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT'), 'Applications');
    const fetchBundleId = async appRoot => {
      const {
        stdout
      } = await (0, _teen_process.exec)('/usr/libexec/PlistBuddy', ['-c', 'print CFBundleIdentifier', _path.default.resolve(appRoot, 'Info.plist')]);
      return _lodash.default.trim(stdout);
    };
    const allApps = (await _support.fs.readdir(appsRoot)).filter(x => x.endsWith('.app')).map(x => _path.default.join(appsRoot, x));
    this._systemAppBundleIds = new Set(await _bluebird.default.all(allApps.map(fetchBundleId)));
    return this._systemAppBundleIds;
  }
  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);
      if (!appContainer.endsWith('.app')) {
        return false;
      }
      return await _support.fs.exists(appContainer);
    } catch (err) {
      return (await this._fetchSystemAppBundleIds()).has(bundleId);
    }
  }
  async getLaunchDaemonsRoot() {
    return _path.default.resolve(await this.simctl.getEnv('IPHONE_SIMULATOR_ROOT'), 'System/Library/LaunchDaemons');
  }
}
var _default = SimulatorXcode15;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3VwcG9ydCIsInJlcXVpcmUiLCJfdGVlbl9wcm9jZXNzIiwiX3BhdGgiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZGFzaCIsIl9ibHVlYmlyZCIsIl9zaW11bGF0b3JYY29kZSIsIlNpbXVsYXRvclhjb2RlMTUiLCJTaW11bGF0b3JYY29kZTE0IiwiX2ZldGNoU3lzdGVtQXBwQnVuZGxlSWRzIiwiX3N5c3RlbUFwcEJ1bmRsZUlkcyIsImFwcHNSb290IiwicGF0aCIsInJlc29sdmUiLCJzaW1jdGwiLCJnZXRFbnYiLCJmZXRjaEJ1bmRsZUlkIiwiYXBwUm9vdCIsInN0ZG91dCIsImV4ZWMiLCJfIiwidHJpbSIsImFsbEFwcHMiLCJmcyIsInJlYWRkaXIiLCJmaWx0ZXIiLCJ4IiwiZW5kc1dpdGgiLCJtYXAiLCJqb2luIiwiU2V0IiwiQiIsImFsbCIsImlzQXBwSW5zdGFsbGVkIiwiYnVuZGxlSWQiLCJhcHBDb250YWluZXIiLCJnZXRBcHBDb250YWluZXIiLCJleGlzdHMiLCJlcnIiLCJoYXMiLCJnZXRMYXVuY2hEYWVtb25zUm9vdCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9saWIvc2ltdWxhdG9yLXhjb2RlLTE1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlMTQgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtMTQnO1xuXG5jbGFzcyBTaW11bGF0b3JYY29kZTE1IGV4dGVuZHMgU2ltdWxhdG9yWGNvZGUxNCB7XG4gIC8qKlxuICAgKiBDb2xsZWN0cyBhbmQgY2FjaGVzIGJ1bmRsZSBpbmRldGlmaWVyIG9mIHN5c3RlbSBTaW11bGF0b3IgYXBwc1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTZXQ8c3RyaW5nPj59XG4gICAqL1xuICBhc3luYyBfZmV0Y2hTeXN0ZW1BcHBCdW5kbGVJZHMgKCkge1xuICAgIGlmICh0aGlzLl9zeXN0ZW1BcHBCdW5kbGVJZHMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zeXN0ZW1BcHBCdW5kbGVJZHM7XG4gICAgfVxuXG4gICAgY29uc3QgYXBwc1Jvb3QgPSBwYXRoLnJlc29sdmUoYXdhaXQgdGhpcy5zaW1jdGwuZ2V0RW52KCdJUEhPTkVfU0lNVUxBVE9SX1JPT1QnKSwgJ0FwcGxpY2F0aW9ucycpO1xuICAgIGNvbnN0IGZldGNoQnVuZGxlSWQgPSBhc3luYyAoYXBwUm9vdCkgPT4ge1xuICAgICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKCcvdXNyL2xpYmV4ZWMvUGxpc3RCdWRkeScsIFtcbiAgICAgICAgJy1jJywgJ3ByaW50IENGQnVuZGxlSWRlbnRpZmllcicsIHBhdGgucmVzb2x2ZShhcHBSb290LCAnSW5mby5wbGlzdCcpXG4gICAgICBdKTtcbiAgICAgIHJldHVybiBfLnRyaW0oc3Rkb3V0KTtcbiAgICB9O1xuICAgIGNvbnN0IGFsbEFwcHMgPSAoYXdhaXQgZnMucmVhZGRpcihhcHBzUm9vdCkpXG4gICAgICAuZmlsdGVyKCh4KSA9PiB4LmVuZHNXaXRoKCcuYXBwJykpXG4gICAgICAubWFwKCh4KSA9PiBwYXRoLmpvaW4oYXBwc1Jvb3QsIHgpKTtcbiAgICB0aGlzLl9zeXN0ZW1BcHBCdW5kbGVJZHMgPSBuZXcgU2V0KGF3YWl0IEIuYWxsKGFsbEFwcHMubWFwKGZldGNoQnVuZGxlSWQpKSk7XG4gICAgcmV0dXJuIHRoaXMuX3N5c3RlbUFwcEJ1bmRsZUlkcztcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgd2hldGhlciB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbiBpcyBpbnN0YWxsZWQgb24gU2ltdWxhdG9yLlxuICAgKiBAb3ZlcnJpZGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgY2hlY2tlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkLlxuICAgKi9cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IGF3YWl0IHRoaXMuc2ltY3RsLmdldEFwcENvbnRhaW5lcihidW5kbGVJZCk7XG4gICAgICBpZiAoIWFwcENvbnRhaW5lci5lbmRzV2l0aCgnLmFwcCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCBmcy5leGlzdHMoYXBwQ29udGFpbmVyKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGdldF9hcHBfY29udGFpbmVyIHN1YmNvbW1hbmQgZmFpbHMgZm9yIHN5c3RlbSBhcHBsaWNhdGlvbnMsXG4gICAgICAvLyBhcyB3ZWxsIGFzIHRoZSBoaWRkZW4gYXBwaW5mbyBjb21tYW5kXG4gICAgICByZXR1cm4gKGF3YWl0IHRoaXMuX2ZldGNoU3lzdGVtQXBwQnVuZGxlSWRzKCkpLmhhcyhidW5kbGVJZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAaW5oZXJpdGRvY1xuICAgKi9cbiAgYXN5bmMgZ2V0TGF1bmNoRGFlbW9uc1Jvb3QgKCkge1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUoXG4gICAgICBhd2FpdCB0aGlzLnNpbWN0bC5nZXRFbnYoJ0lQSE9ORV9TSU1VTEFUT1JfUk9PVCcpLFxuICAgICAgJ1N5c3RlbS9MaWJyYXJ5L0xhdW5jaERhZW1vbnMnXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaW11bGF0b3JY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