"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SIMULATOR_APP_NAME = exports.SAFARI_STARTUP_TIMEOUT_MS = exports.MOBILE_SAFARI_BUNDLE_ID = void 0;
exports.activateApp = activateApp;
exports.getDeveloperRoot = getDeveloperRoot;
exports.getSimulatorInfo = getSimulatorInfo;
exports.killAllSimulators = killAllSimulators;
exports.simExists = simExists;
exports.toBiometricDomainComponent = toBiometricDomainComponent;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("./logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _asyncbox = require("asyncbox");
var _appiumXcode = require("appium-xcode");
var _nodeSimctl = _interopRequireDefault(require("node-simctl"));
var _path = _interopRequireDefault(require("path"));
const DEFAULT_SIM_SHUTDOWN_TIMEOUT_MS = 30000;
const SAFARI_STARTUP_TIMEOUT_MS = 25 * 1000;
exports.SAFARI_STARTUP_TIMEOUT_MS = SAFARI_STARTUP_TIMEOUT_MS;
const MOBILE_SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
exports.MOBILE_SAFARI_BUNDLE_ID = MOBILE_SAFARI_BUNDLE_ID;
const SIMULATOR_APP_NAME = 'Simulator.app';
exports.SIMULATOR_APP_NAME = SIMULATOR_APP_NAME;
const APP_ACTIVATION_SCRIPT = pid => `
use framework "Foundation"
use framework "AppKit"
use scripting additions

set theApp to current application's NSRunningApplication's runningApplicationWithProcessIdentifier:${pid}
if theApp = null then
	log "Cannot find Simulator window under PID ${pid}. Is it running?"
	error number 1
end if
set result to theApp's activateWithOptions:3
if not result then
	log "Cannot activate Simulator window under PID ${pid}. Is it running?"
	error number 1
end if
`;
const BIOMETRICS = {
  touchId: 'fingerTouch',
  faceId: 'pearl'
};
function toBiometricDomainComponent(name) {
  if (!BIOMETRICS[name]) {
    throw new Error(`'${name}' is not a valid biometric. Use one of: ${JSON.stringify(_lodash.default.keys(BIOMETRICS))}`);
  }
  return BIOMETRICS[name];
}
async function pkill(appName, forceKill = false) {
  let args = forceKill ? ['-9'] : [];
  args.push('-x', appName);
  try {
    await (0, _teen_process.exec)('pkill', args);
    return 0;
  } catch (err) {
    if (!_lodash.default.isUndefined(err.code)) {
      throw new Error(`Cannot forcefully terminate ${appName}. pkill error code: ${err.code}`);
    }
    _logger.default.error(`Received unexpected error while trying to kill ${appName}: ${err.message}`);
    throw err;
  }
}
async function killAllSimulators(timeout = DEFAULT_SIM_SHUTDOWN_TIMEOUT_MS) {
  _logger.default.debug('Killing all iOS Simulators');
  const xcodeVersion = await (0, _appiumXcode.getVersion)(true);
  const appName = _path.default.parse(SIMULATOR_APP_NAME).name;
  timeout = timeout * (xcodeVersion.major >= 8 ? 2 : 1);
  try {
    await (0, _teen_process.exec)('xcrun', ['simctl', 'shutdown', xcodeVersion.major > 8 ? 'all' : 'booted'], {
      timeout
    });
  } catch (ign) {}
  const pids = [];
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', ['-f', `${appName}.app/Contents/MacOS/`]);
    if (stdout.trim()) {
      pids.push(...stdout.trim().split(/\s+/));
    }
  } catch (e) {
    if (e.code === 1) {
      _logger.default.debug(`${appName} is not running. Continuing...`);
      return;
    }
    if (_lodash.default.isEmpty(pids)) {
      _logger.default.warn(`pgrep error ${e.code} while detecting whether ${appName} is running. Trying to kill anyway.`);
    }
  }
  if (!_lodash.default.isEmpty(pids)) {
    _logger.default.debug(`Killing processes: ${pids.join(', ')}`);
    try {
      await (0, _teen_process.exec)('kill', ['-9', ...pids.map(pid => `${pid}`)]);
    } catch (ign) {}
  }
  _logger.default.debug(`Using pkill to kill application: ${appName}`);
  try {
    await pkill(appName, true);
  } catch (ign) {}
  let remainingDevices = [];
  async function allSimsAreDown() {
    remainingDevices = [];
    let devices = await new _nodeSimctl.default().getDevices();
    devices = _lodash.default.flatten(_lodash.default.values(devices));
    return _lodash.default.every(devices, sim => {
      const state = sim.state.toLowerCase();
      const done = ['shutdown', 'unavailable', 'disconnected'].includes(state);
      if (!done) {
        remainingDevices.push(`${sim.name} (${sim.sdk}, udid: ${sim.udid}) is still in state '${state}'`);
      }
      return done;
    });
  }
  try {
    await (0, _asyncbox.waitForCondition)(allSimsAreDown, {
      waitMs: timeout,
      intervalMs: 200
    });
  } catch (err) {
    if (remainingDevices.length > 0) {
      _logger.default.warn(`The following devices are still not in the correct state after ${timeout} ms:`);
      for (let device of remainingDevices) {
        _logger.default.warn(`    ${device}`);
      }
    }
    throw err;
  }
}
async function getSimulatorInfo(udid, opts = {}) {
  const {
    devicesSetPath
  } = opts;
  let devices = await new _nodeSimctl.default({
    devicesSetPath
  }).getDevices();
  devices = _lodash.default.toPairs(devices).map(pair => pair[1]).reduce((a, b) => a.concat(b), []);
  return _lodash.default.find(devices, sim => sim.udid === udid);
}
async function simExists(udid) {
  return !!(await getSimulatorInfo(udid));
}
async function getDeveloperRoot() {
  const {
    stdout
  } = await (0, _teen_process.exec)('xcode-select', ['-p']);
  return stdout.trim();
}
async function activateApp(pid) {
  try {
    await (0, _teen_process.exec)('osascript', ['-e', APP_ACTIVATION_SCRIPT(pid)]);
  } catch (e) {
    throw new Error(`Simulator window cannot be activated. Original error: ${e.stderr || e.message}`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,