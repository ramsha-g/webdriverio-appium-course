"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlistService = void 0;
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _sslHelper = require("../ssl-helper");
var _plistServiceEncoder = _interopRequireDefault(require("./transformer/plist-service-encoder"));
var _plistServiceDecoder = _interopRequireDefault(require("./transformer/plist-service-decoder"));
var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));
var _baseService = require("../base-service");
var _constants = require("../constants");
const MAX_FRAME_SIZE = 1 * _constants.MB;
const CHECK_FREQ_MS = 50;
class PlistService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
    this._encoder = new _plistServiceEncoder.default();
    this._encoder.pipe(this._socketClient);
    this._assignClientFailureHandlers(this._encoder);
    this.replyQueue = [];
    this._decoder.on('data', data => this.replyQueue.push(data));
  }
  async sendPlistAndReceive(json, timeout = 5000) {
    this.sendPlist(json);
    return await this.receivePlist(timeout);
  }
  sendPlist(json) {
    if (!json) {
      throw new Error('Cant send a null a object');
    }
    this._encoder.write(json);
  }
  async receivePlist(timeout = 5000) {
    return await new _bluebird.default((resolve, reject) => {
      const queue = this.replyQueue;
      const data = queue.shift();
      if (data) {
        resolve(data);
        return;
      }
      const checkExist = setInterval(() => {
        const data = queue.shift();
        if (!data) {
          return;
        }
        clearInterval(checkExist);
        resolve(data);
      }, CHECK_FREQ_MS);
      setTimeout(() => {
        clearInterval(checkExist);
        reject(new Error(`Failed to receive any data within the timeout: ${timeout}`));
      }, timeout);
    });
  }
  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._socketClient.unpipe(this._splitter);
    this._encoder.unpipe(this._socketClient);
    this._socketClient = (0, _sslHelper.upgradeToSSL)(this._socketClient, hostPrivateKey, hostCertificate);
    this._encoder.pipe(this._socketClient);
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
  }
}
exports.PlistService = PlistService;
var _default = PlistService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmx1ZWJpcmQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zc2xIZWxwZXIiLCJfcGxpc3RTZXJ2aWNlRW5jb2RlciIsIl9wbGlzdFNlcnZpY2VEZWNvZGVyIiwiX2xlbmd0aEJhc2VkU3BsaXR0ZXIiLCJfYmFzZVNlcnZpY2UiLCJfY29uc3RhbnRzIiwiTUFYX0ZSQU1FX1NJWkUiLCJNQiIsIkNIRUNLX0ZSRVFfTVMiLCJQbGlzdFNlcnZpY2UiLCJCYXNlU2VydmljZVNvY2tldCIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX2RlY29kZXIiLCJQbGlzdFNlcnZpY2VEZWNvZGVyIiwiX3NwbGl0dGVyIiwiTGVuZ3RoQmFzZWRTcGxpdHRlciIsInJlYWRhYmxlU3RyZWFtIiwibGl0dGxlRW5kaWFuIiwibWF4RnJhbWVMZW5ndGgiLCJsZW5ndGhGaWVsZE9mZnNldCIsImxlbmd0aEZpZWxkTGVuZ3RoIiwibGVuZ3RoQWRqdXN0bWVudCIsIl9zb2NrZXRDbGllbnQiLCJwaXBlIiwiX2VuY29kZXIiLCJQbGlzdFNlcnZpY2VFbmNvZGVyIiwiX2Fzc2lnbkNsaWVudEZhaWx1cmVIYW5kbGVycyIsInJlcGx5UXVldWUiLCJvbiIsImRhdGEiLCJwdXNoIiwic2VuZFBsaXN0QW5kUmVjZWl2ZSIsImpzb24iLCJ0aW1lb3V0Iiwic2VuZFBsaXN0IiwicmVjZWl2ZVBsaXN0IiwiRXJyb3IiLCJ3cml0ZSIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwicXVldWUiLCJzaGlmdCIsImNoZWNrRXhpc3QiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0IiwiZW5hYmxlU2Vzc2lvblNTTCIsImhvc3RQcml2YXRlS2V5IiwiaG9zdENlcnRpZmljYXRlIiwidW5waXBlIiwidXBncmFkZVRvU1NMIiwiZXhwb3J0cyIsIl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9wbGlzdC1zZXJ2aWNlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHVwZ3JhZGVUb1NTTCB9IGZyb20gJy4uL3NzbC1oZWxwZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZUVuY29kZXIgZnJvbSAnLi90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWVuY29kZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZURlY29kZXIgZnJvbSAnLi90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWRlY29kZXInO1xuaW1wb3J0IExlbmd0aEJhc2VkU3BsaXR0ZXIgZnJvbSAnLi4vdXRpbC90cmFuc2Zvcm1lci9sZW5ndGgtYmFzZWQtc3BsaXR0ZXInO1xuaW1wb3J0IHsgQmFzZVNlcnZpY2VTb2NrZXQgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuaW1wb3J0IHsgTUIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5cbmNvbnN0IE1BWF9GUkFNRV9TSVpFID0gMSAqIE1CO1xuXG5jb25zdCBDSEVDS19GUkVRX01TID0gNTA7XG5cbmNsYXNzIFBsaXN0U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlU29ja2V0IHtcbiAgY29uc3RydWN0b3IgKHNvY2tldENsaWVudCkge1xuICAgIHN1cGVyKHNvY2tldENsaWVudCk7XG5cbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFBsaXN0U2VydmljZURlY29kZXIoKTtcbiAgICB0aGlzLl9zcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKHtcbiAgICAgIHJlYWRhYmxlU3RyZWFtOiBzb2NrZXRDbGllbnQsXG4gICAgICBsaXR0bGVFbmRpYW46IGZhbHNlLFxuICAgICAgbWF4RnJhbWVMZW5ndGg6IE1BWF9GUkFNRV9TSVpFLFxuICAgICAgbGVuZ3RoRmllbGRPZmZzZXQ6IDAsXG4gICAgICBsZW5ndGhGaWVsZExlbmd0aDogNCxcbiAgICAgIGxlbmd0aEFkanVzdG1lbnQ6IDQsXG4gICAgfSk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUodGhpcy5fc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICB0aGlzLl9lbmNvZGVyID0gbmV3IFBsaXN0U2VydmljZUVuY29kZXIoKTtcbiAgICB0aGlzLl9lbmNvZGVyLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLl9hc3NpZ25DbGllbnRGYWlsdXJlSGFuZGxlcnModGhpcy5fZW5jb2Rlcik7XG5cbiAgICB0aGlzLnJlcGx5UXVldWUgPSBbXTtcbiAgICB0aGlzLl9kZWNvZGVyLm9uKCdkYXRhJywgKGRhdGEpID0+IHRoaXMucmVwbHlRdWV1ZS5wdXNoKGRhdGEpKTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRQbGlzdEFuZFJlY2VpdmUgKGpzb24sIHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgdGhpcy5zZW5kUGxpc3QoanNvbik7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVjZWl2ZVBsaXN0KHRpbWVvdXQpO1xuICB9XG5cbiAgc2VuZFBsaXN0IChqc29uKSB7XG4gICAgaWYgKCFqc29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnQgc2VuZCBhIG51bGwgYSBvYmplY3QnKTtcbiAgICB9XG4gICAgdGhpcy5fZW5jb2Rlci53cml0ZShqc29uKTtcbiAgfVxuXG4gIGFzeW5jIHJlY2VpdmVQbGlzdCAodGltZW91dCA9IDUwMDApIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVldWUgPSB0aGlzLnJlcGx5UXVldWU7XG4gICAgICBjb25zdCBkYXRhID0gcXVldWUuc2hpZnQoKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoZWNrRXhpc3QgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0V4aXN0KTtcbiAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgIH0sIENIRUNLX0ZSRVFfTVMpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tFeGlzdCk7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byByZWNlaXZlIGFueSBkYXRhIHdpdGhpbiB0aGUgdGltZW91dDogJHt0aW1lb3V0fWApKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH0pO1xuICB9XG5cbiAgZW5hYmxlU2Vzc2lvblNTTCAoaG9zdFByaXZhdGVLZXksIGhvc3RDZXJ0aWZpY2F0ZSkge1xuICAgIHRoaXMuX3NvY2tldENsaWVudC51bnBpcGUodGhpcy5fc3BsaXR0ZXIpO1xuICAgIHRoaXMuX2VuY29kZXIudW5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50ID0gdXBncmFkZVRvU1NMKHRoaXMuX3NvY2tldENsaWVudCwgaG9zdFByaXZhdGVLZXksIGhvc3RDZXJ0aWZpY2F0ZSk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUodGhpcy5fc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGxpc3RTZXJ2aWNlIH07XG5leHBvcnQgZGVmYXVsdCBQbGlzdFNlcnZpY2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsb0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLG9CQUFBLEdBQUFKLHNCQUFBLENB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