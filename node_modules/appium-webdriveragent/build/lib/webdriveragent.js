"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebDriverAgent = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _url2 = _interopRequireDefault(require("url"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _baseDriver = require("@appium/base-driver");
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("./logger"));
var _noSessionProxy = require("./no-session-proxy");
var _utils = require("./utils");
var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _teen_process = require("teen_process");
var _checkDependencies = require("./check-dependencies");
var _constants = require("./constants");
var _appiumIosDevice = require("appium-ios-device");
var _strongbox = require("@appium/strongbox");
const WDA_LAUNCH_TIMEOUT = 60 * 1000;
const WDA_AGENT_PORT = 8100;
const WDA_CF_BUNDLE_NAME = 'WebDriverAgentRunner-Runner';
const SHARED_RESOURCES_GUARD = new _asyncLock.default();
const RECENT_MODULE_VERSION_ITEM_NAME = 'recentWdaModuleVersion';
class WebDriverAgent {
  constructor(xcodeVersion, args = {}, log = null) {
    this.xcodeVersion = xcodeVersion;
    this.args = _lodash.default.clone(args);
    this.log = log ?? _logger.default;
    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.platformName = args.platformName;
    this.iosSdkVersion = args.iosSdkVersion;
    this.host = args.host;
    this.isRealDevice = !!args.realDevice;
    this.idb = (args.device || {}).idb;
    this.wdaBundlePath = args.wdaBundlePath;
    this.setWDAPaths(args.bootstrapPath, args.agentPath);
    this.wdaLocalPort = args.wdaLocalPort;
    this.wdaRemotePort = args.wdaLocalPort || WDA_AGENT_PORT;
    this.wdaBaseUrl = args.wdaBaseUrl || _constants.WDA_BASE_URL;
    this.prebuildWDA = args.prebuildWDA;
    this.webDriverAgentUrl = args.webDriverAgentUrl;
    this.started = false;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;
    this.useXctestrunFile = args.useXctestrunFile;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.derivedDataPath = args.derivedDataPath;
    this.mjpegServerPort = args.mjpegServerPort;
    this.updatedWDABundleId = args.updatedWDABundleId;
    this.usePreinstalledWDA = args.usePreinstalledWDA;
    this.xctestApiClient = null;
    this.xcodebuild = this.canSkipXcodebuild ? null : new _xcodebuild.default(this.xcodeVersion, this.device, {
      platformVersion: this.platformVersion,
      platformName: this.platformName,
      iosSdkVersion: this.iosSdkVersion,
      agentPath: this.agentPath,
      bootstrapPath: this.bootstrapPath,
      realDevice: this.isRealDevice,
      showXcodeLog: args.showXcodeLog,
      xcodeConfigFile: args.xcodeConfigFile,
      xcodeOrgId: args.xcodeOrgId,
      xcodeSigningId: args.xcodeSigningId,
      keychainPath: args.keychainPath,
      keychainPassword: args.keychainPassword,
      useSimpleBuildTest: args.useSimpleBuildTest,
      usePrebuiltWDA: args.usePrebuiltWDA,
      updatedWDABundleId: this.updatedWDABundleId,
      launchTimeout: args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT,
      wdaRemotePort: this.wdaRemotePort,
      useXctestrunFile: this.useXctestrunFile,
      derivedDataPath: args.derivedDataPath,
      mjpegServerPort: this.mjpegServerPort,
      allowProvisioningDeviceRegistration: args.allowProvisioningDeviceRegistration,
      resultBundlePath: args.resultBundlePath,
      resultBundleVersion: args.resultBundleVersion
    }, this.log);
  }
  get canSkipXcodebuild() {
    return this.usePreinstalledWDA || this.args.webDriverAgentUrl;
  }
  get bundleIdForXctest() {
    return this.updatedWDABundleId ? `${this.updatedWDABundleId}.xctrunner` : _constants.WDA_RUNNER_BUNDLE_ID_FOR_XCTEST;
  }
  setWDAPaths(bootstrapPath, agentPath) {
    this.bootstrapPath = bootstrapPath || _utils.BOOTSTRAP_PATH;
    this.log.info(`Using WDA path: '${this.bootstrapPath}'`);
    this.agentPath = agentPath || _path.default.resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');
    this.log.info(`Using WDA agent: '${this.agentPath}'`);
  }
  async cleanupObsoleteProcesses() {
    const obsoletePids = await (0, _utils.getPIDsListeningOnPort)(this.url.port, cmdLine => cmdLine.includes('/WebDriverAgentRunner') && !cmdLine.toLowerCase().includes(this.device.udid.toLowerCase()));
    if (_lodash.default.isEmpty(obsoletePids)) {
      this.log.debug(`No obsolete cached processes from previous WDA sessions ` + `listening on port ${this.url.port} have been found`);
      return;
    }
    this.log.info(`Detected ${obsoletePids.length} obsolete cached process${obsoletePids.length === 1 ? '' : 'es'} ` + `from previous WDA sessions. Cleaning them up`);
    try {
      await (0, _teen_process.exec)('kill', obsoletePids);
    } catch (e) {
      this.log.warn(`Failed to kill obsolete cached process${obsoletePids.length === 1 ? '' : 'es'} '${obsoletePids}'. ` + `Original error: ${e.message}`);
    }
  }
  async isRunning() {
    return !!(await this.getStatus());
  }
  get basePath() {
    if (this.url.path === '/') {
      return '';
    }
    return this.url.path || '';
  }
  async getStatus() {
    const noSessionProxy = new _noSessionProxy.NoSessionProxy({
      server: this.url.hostname,
      port: this.url.port,
      base: this.basePath,
      timeout: 3000
    });
    try {
      return await noSessionProxy.command('/status', 'GET');
    } catch (err) {
      this.log.debug(`WDA is not listening at '${this.url.href}'`);
      return null;
    }
  }
  async uninstall() {
    try {
      const bundleIds = await this.device.getUserInstalledBundleIdsByBundleName(WDA_CF_BUNDLE_NAME);
      if (_lodash.default.isEmpty(bundleIds)) {
        this.log.debug('No WDAs on the device.');
        return;
      }
      this.log.debug(`Uninstalling WDAs: '${bundleIds}'`);
      for (const bundleId of bundleIds) {
        await this.device.removeApp(bundleId);
      }
    } catch (e) {
      this.log.debug(e);
      this.log.warn(`WebDriverAgent uninstall failed. Perhaps, it is already uninstalled? ` + `Original error: ${e.message}`);
    }
  }
  async _cleanupProjectIfFresh() {
    if (this.canSkipXcodebuild) {
      return;
    }
    const packageInfo = JSON.parse(await _support.fs.readFile(_path.default.join(_utils.BOOTSTRAP_PATH, 'package.json'), 'utf8'));
    const box = (0, _strongbox.strongbox)(packageInfo.name);
    let boxItem = box.getItem(RECENT_MODULE_VERSION_ITEM_NAME);
    if (!boxItem) {
      const timestampPath = _path.default.resolve(process.env.HOME, _constants.WDA_UPGRADE_TIMESTAMP_PATH);
      if (await _support.fs.exists(timestampPath)) {
        try {
          boxItem = await box.createItemWithValue(RECENT_MODULE_VERSION_ITEM_NAME, '5.0.0');
        } catch (e) {
          this.log.warn(`The actual module version cannot be persisted: ${e.message}`);
          return;
        }
      } else {
        this.log.info('There is no need to perform the project cleanup. A fresh install has been detected');
        try {
          await box.createItemWithValue(RECENT_MODULE_VERSION_ITEM_NAME, packageInfo.version);
        } catch (e) {
          this.log.warn(`The actual module version cannot be persisted: ${e.message}`);
        }
        return;
      }
    }
    let recentModuleVersion = await boxItem.read();
    try {
      recentModuleVersion = _support.util.coerceVersion(recentModuleVersion, true);
    } catch (e) {
      this.log.warn(`The persisted module version string has been damaged: ${e.message}`);
      this.log.info(`Updating it to '${packageInfo.version}' assuming the project clenup is not needed`);
      await boxItem.write(packageInfo.version);
      return;
    }
    if (_support.util.compareVersions(recentModuleVersion, '>=', packageInfo.version)) {
      this.log.info(`WebDriverAgent does not need a cleanup. The project sources are up to date ` + `(${recentModuleVersion} >= ${packageInfo.version})`);
      return;
    }
    this.log.info(`Cleaning up the WebDriverAgent project after the module upgrade has happened ` + `(${recentModuleVersion} < ${packageInfo.version})`);
    try {
      await this.xcodebuild.cleanProject();
      await boxItem.write(packageInfo.version);
    } catch (e) {
      this.log.warn(`Cannot perform WebDriverAgent project cleanup. Original error: ${e.message}`);
    }
  }
  async launchWithPreinstalledWDA(sessionId) {
    const xctestEnv = {
      USE_PORT: this.wdaLocalPort || WDA_AGENT_PORT,
      WDA_PRODUCT_BUNDLE_IDENTIFIER: this.bundleIdForXctest
    };
    if (this.mjpegServerPort) {
      xctestEnv.MJPEG_SERVER_PORT = this.mjpegServerPort;
    }
    this.log.info('Launching WebDriverAgent on the device without xcodebuild');
    this.xctestApiClient = new _appiumIosDevice.Xctest(this.device.udid, this.bundleIdForXctest, null, {
      env: xctestEnv
    });
    await this.xctestApiClient.start();
    this.setupProxies(sessionId);
    const status = await this.getStatus();
    this.started = true;
    return status;
  }
  async launch(sessionId) {
    if (this.webDriverAgentUrl) {
      this.log.info(`Using provided WebdriverAgent at '${this.webDriverAgentUrl}'`);
      this.url = this.webDriverAgentUrl;
      this.setupProxies(sessionId);
      return await this.getStatus();
    }
    if (this.usePreinstalledWDA) {
      if (this.isRealDevice) {
        return await this.launchWithPreinstalledWDA(sessionId);
      }
      throw new Error('usePreinstalledWDA is available only for a real device.');
    }
    this.log.info('Launching WebDriverAgent on the device');
    this.setupProxies(sessionId);
    if (!this.useXctestrunFile && !(await _support.fs.exists(this.agentPath))) {
      throw new Error(`Trying to use WebDriverAgent project at '${this.agentPath}' but the ` + 'file does not exist');
    }
    if (this.idb || this.useXctestrunFile || this.derivedDataPath && this.usePrebuiltWDA) {
      this.log.info('Skipped WDA project cleanup according to the provided capabilities');
    } else {
      const synchronizationKey = _path.default.normalize(this.bootstrapPath);
      await SHARED_RESOURCES_GUARD.acquire(synchronizationKey, async () => await this._cleanupProjectIfFresh());
    }
    await (0, _utils.resetTestProcesses)(this.device.udid, !this.isRealDevice);
    if (this.idb) {
      return await this.startWithIDB();
    }
    await this.xcodebuild.init(this.noSessionProxy);
    if (this.prebuildWDA) {
      await this.xcodebuild.prebuild();
    }
    return await this.xcodebuild.start();
  }
  async startWithIDB() {
    this.log.info('Will launch WDA with idb instead of xcodebuild since the corresponding flag is enabled');
    const {
      wdaBundleId,
      testBundleId
    } = await this.prepareWDA();
    const env = {
      USE_PORT: this.wdaRemotePort,
      WDA_PRODUCT_BUNDLE_IDENTIFIER: this.updatedWDABundleId
    };
    if (this.mjpegServerPort) {
      env.MJPEG_SERVER_PORT = this.mjpegServerPort;
    }
    return await this.idb.runXCUITest(wdaBundleId, wdaBundleId, testBundleId, {
      env
    });
  }
  async parseBundleId(wdaBundlePath) {
    const infoPlistPath = _path.default.join(wdaBundlePath, 'Info.plist');
    const infoPlist = await _support.plist.parsePlist(await _support.fs.readFile(infoPlistPath));
    if (!infoPlist.CFBundleIdentifier) {
      throw new Error(`Could not find bundle id in '${infoPlistPath}'`);
    }
    return infoPlist.CFBundleIdentifier;
  }
  async prepareWDA() {
    const wdaBundlePath = this.wdaBundlePath || (await this.fetchWDABundle());
    const wdaBundleId = await this.parseBundleId(wdaBundlePath);
    if (!(await this.device.isAppInstalled(wdaBundleId))) {
      await this.device.installApp(wdaBundlePath);
    }
    const testBundleId = await this.idb.installXCTestBundle(_path.default.join(wdaBundlePath, 'PlugIns', 'WebDriverAgentRunner.xctest'));
    return {
      wdaBundleId,
      testBundleId,
      wdaBundlePath
    };
  }
  async fetchWDABundle() {
    if (!this.derivedDataPath) {
      return await (0, _checkDependencies.bundleWDASim)(this.xcodebuild);
    }
    const wdaBundlePaths = await _support.fs.glob(`${this.derivedDataPath}/**/*${_constants.WDA_RUNNER_APP}/`, {
      absolute: true
    });
    if (_lodash.default.isEmpty(wdaBundlePaths)) {
      throw new Error(`Could not find the WDA bundle in '${this.derivedDataPath}'`);
    }
    return wdaBundlePaths[0];
  }
  async isSourceFresh() {
    const existsPromises = ['Resources', `Resources${_path.default.sep}WebDriverAgent.bundle`].map(subPath => _support.fs.exists(_path.default.resolve(this.bootstrapPath, subPath)));
    return (await _bluebird.default.all(existsPromises)).some(v => v === false);
  }
  setupProxies(sessionId) {
    const proxyOpts = {
      log: this.log,
      server: this.url.hostname,
      port: this.url.port,
      base: this.basePath,
      timeout: this.wdaConnectionTimeout,
      keepAlive: true
    };
    this.jwproxy = new _baseDriver.JWProxy(proxyOpts);
    this.jwproxy.sessionId = sessionId;
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
  }
  async quit() {
    if (this.usePreinstalledWDA) {
      if (this.xctestApiClient) {
        this.log.info('Stopping the XCTest session');
        this.xctestApiClient.stop();
        this.xctestApiClient = null;
      }
    } else if (!this.args.webDriverAgentUrl) {
      this.log.info('Shutting down sub-processes');
      await this.xcodebuild.quit();
      await this.xcodebuild.reset();
    } else {
      this.log.debug('Do not stop xcodebuild nor XCTest session ' + 'since the WDA session is managed by outside this driver.');
    }
    if (this.jwproxy) {
      this.jwproxy.sessionId = null;
    }
    this.started = false;
    if (!this.args.webDriverAgentUrl) {
      this.webDriverAgentUrl = null;
    }
  }
  get url() {
    if (!this._url) {
      if (this.webDriverAgentUrl) {
        this._url = _url2.default.parse(this.webDriverAgentUrl);
      } else {
        const port = this.wdaLocalPort || WDA_AGENT_PORT;
        const {
          protocol,
          hostname
        } = _url2.default.parse(this.wdaBaseUrl || _constants.WDA_BASE_URL);
        this._url = _url2.default.parse(`${protocol}//${hostname}:${port}`);
      }
    }
    return this._url;
  }
  set url(_url) {
    this._url = _url2.default.parse(_url);
  }
  get fullyStarted() {
    return this.started;
  }
  set fullyStarted(started = false) {
    this.started = started;
  }
  async retrieveDerivedDataPath() {
    if (this.canSkipXcodebuild) {
      return;
    }
    return await this.xcodebuild.retrieveDerivedDataPath();
  }
  async setupCaching() {
    const status = await this.getStatus();
    if (!status || !status.build) {
      this.log.debug('WDA is currently not running. There is nothing to cache');
      return;
    }
    const {
      productBundleIdentifier,
      upgradedAt
    } = status.build;
    if (_support.util.hasValue(productBundleIdentifier) && _support.util.hasValue(this.updatedWDABundleId) && this.updatedWDABundleId !== productBundleIdentifier) {
      this.log.info(`Will uninstall running WDA since it has different bundle id. The actual value is '${productBundleIdentifier}'.`);
      return await this.uninstall();
    }
    if (_support.util.hasValue(productBundleIdentifier) && !_support.util.hasValue(this.updatedWDABundleId) && _constants.WDA_RUNNER_BUNDLE_ID !== productBundleIdentifier) {
      this.log.info(`Will uninstall running WDA since its bundle id is not equal to the default value ${_constants.WDA_RUNNER_BUNDLE_ID}`);
      return await this.uninstall();
    }
    const actualUpgradeTimestamp = await (0, _utils.getWDAUpgradeTimestamp)();
    this.log.debug(`Upgrade timestamp of the currently bundled WDA: ${actualUpgradeTimestamp}`);
    this.log.debug(`Upgrade timestamp of the WDA on the device: ${upgradedAt}`);
    if (actualUpgradeTimestamp && upgradedAt && _lodash.default.toLower(`${actualUpgradeTimestamp}`) !== _lodash.default.toLower(`${upgradedAt}`)) {
      this.log.info('Will uninstall running WDA since it has different version in comparison to the one ' + `which is bundled with appium-xcuitest-driver module (${actualUpgradeTimestamp} != ${upgradedAt})`);
      return await this.uninstall();
    }
    const message = _support.util.hasValue(productBundleIdentifier) ? `Will reuse previously cached WDA instance at '${this.url.href}' with '${productBundleIdentifier}'` : `Will reuse previously cached WDA instance at '${this.url.href}'`;
    this.log.info(`${message}. Set the wdaLocalPort capability to a value different from ${this.url.port} if this is an undesired behavior.`);
    this.webDriverAgentUrl = this.url.href;
  }
  async quitAndUninstall() {
    await this.quit();
    await this.uninstall();
  }
}
exports.WebDriverAgent = WebDriverAgent;
var _default = WebDriverAgent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,